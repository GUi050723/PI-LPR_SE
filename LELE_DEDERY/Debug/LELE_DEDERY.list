
LELE_DEDERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004738  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001798  08004844  08004844  00014844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fdc  08005fdc  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08005fdc  08005fdc  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fdc  08005fdc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fdc  08005fdc  00015fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000084  08006068  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08006068  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008504  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016be  00000000  00000000  000285b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000708  00000000  00000000  00029c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00017162  00000000  00000000  0002a378  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000657f  00000000  00000000  000414da  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00082964  00000000  00000000  00047a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000ca3bd  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000638  00000000  00000000  000ca438  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00002274  00000000  00000000  000caa70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	0800482c 	.word	0x0800482c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	0800482c 	.word	0x0800482c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a44:	f1a2 0201 	sub.w	r2, r2, #1
 8000a48:	d1ed      	bne.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpun>:
 8000f30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f3c:	d102      	bne.n	8000f44 <__aeabi_fcmpun+0x14>
 8000f3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f42:	d108      	bne.n	8000f56 <__aeabi_fcmpun+0x26>
 8000f44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f48:	d102      	bne.n	8000f50 <__aeabi_fcmpun+0x20>
 8000f4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f4e:	d102      	bne.n	8000f56 <__aeabi_fcmpun+0x26>
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0001 	mov.w	r0, #1
 8000f5a:	4770      	bx	lr

08000f5c <__aeabi_f2iz>:
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f64:	d30f      	bcc.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d90d      	bls.n	8000f8c <__aeabi_f2iz+0x30>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f80:	bf18      	it	ne
 8000f82:	4240      	negne	r0, r0
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2iz+0x3a>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d105      	bne.n	8000fa2 <__aeabi_f2iz+0x46>
 8000f96:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f9a:	bf08      	it	eq
 8000f9c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <ST7735_Select>:
    ST7735_NORON  ,    Delay, //  3: Normal display on, no args, w/HAL_Delay
      10,                     //     10 ms HAL_Delay
    ST7735_DISPON ,    Delay, //  4: Main screen turn on, no args w/HAL_Delay
      100 };                  //     100 ms HAL_Delay

static void ST7735_Select() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <ST7735_Select+0x14>)
 8000fb2:	f002 f87e 	bl	80030b2 <HAL_GPIO_WritePin>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <ST7735_Unselect+0x14>)
 8000fca:	f002 f872 	bl	80030b2 <HAL_GPIO_WritePin>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40010800 	.word	0x40010800

08000fd8 <ST7735_Reset>:

static void ST7735_Reset() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4806      	ldr	r0, [pc, #24]	; (8000ffc <ST7735_Reset+0x24>)
 8000fe2:	f002 f866 	bl	80030b2 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	f001 fdec 	bl	8002bc4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <ST7735_Reset+0x24>)
 8000ff2:	f002 f85e 	bl	80030b2 <HAL_GPIO_WritePin>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2101      	movs	r1, #1
 800100e:	4807      	ldr	r0, [pc, #28]	; (800102c <ST7735_WriteCommand+0x2c>)
 8001010:	f002 f84f 	bl	80030b2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001014:	1df9      	adds	r1, r7, #7
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	2201      	movs	r2, #1
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <ST7735_WriteCommand+0x30>)
 800101e:	f002 fccf 	bl	80039c0 <HAL_SPI_Transmit>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40010c00 	.word	0x40010c00
 8001030:	200000ac 	.word	0x200000ac

08001034 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2101      	movs	r1, #1
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <ST7735_WriteData+0x2c>)
 8001044:	f002 f835 	bl	80030b2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b29a      	uxth	r2, r3
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4804      	ldr	r0, [pc, #16]	; (8001064 <ST7735_WriteData+0x30>)
 8001054:	f002 fcb4 	bl	80039c0 <HAL_SPI_Transmit>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40010c00 	.word	0x40010c00
 8001064:	200000ac 	.word	0x200000ac

08001068 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800107a:	e034      	b.n	80010e6 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001086:	7afb      	ldrb	r3, [r7, #11]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ffb9 	bl	8001000 <ST7735_WriteCommand>

        numArgs = *addr++;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	72bb      	strb	r3, [r7, #10]
        // If high bit set, HAL_Delay follows args
        ms = numArgs & Delay;
 8001098:	7abb      	ldrb	r3, [r7, #10]
 800109a:	b29b      	uxth	r3, r3
 800109c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~Delay;
 80010a2:	7abb      	ldrb	r3, [r7, #10]
 80010a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010a8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80010aa:	7abb      	ldrb	r3, [r7, #10]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d008      	beq.n	80010c2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80010b0:	7abb      	ldrb	r3, [r7, #10]
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ffbd 	bl	8001034 <ST7735_WriteData>
            addr += numArgs;
 80010ba:	7abb      	ldrb	r3, [r7, #10]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80010c2:	89bb      	ldrh	r3, [r7, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00e      	beq.n	80010e6 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80010d2:	89bb      	ldrh	r3, [r7, #12]
 80010d4:	2bff      	cmp	r3, #255	; 0xff
 80010d6:	d102      	bne.n	80010de <ST7735_ExecuteCommandList+0x76>
 80010d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010dc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80010de:	89bb      	ldrh	r3, [r7, #12]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fd6f 	bl	8002bc4 <HAL_Delay>
    while(numCommands--) {
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	1e5a      	subs	r2, r3, #1
 80010ea:	73fa      	strb	r2, [r7, #15]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1c5      	bne.n	800107c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4604      	mov	r4, r0
 8001100:	4608      	mov	r0, r1
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	4623      	mov	r3, r4
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	4603      	mov	r3, r0
 800110c:	71bb      	strb	r3, [r7, #6]
 800110e:	460b      	mov	r3, r1
 8001110:	717b      	strb	r3, [r7, #5]
 8001112:	4613      	mov	r3, r2
 8001114:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001116:	202a      	movs	r0, #42	; 0x2a
 8001118:	f7ff ff72 	bl	8001000 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800111c:	2300      	movs	r3, #0
 800111e:	733b      	strb	r3, [r7, #12]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	3301      	adds	r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	737b      	strb	r3, [r7, #13]
 8001128:	2300      	movs	r3, #0
 800112a:	73bb      	strb	r3, [r7, #14]
 800112c:	797b      	ldrb	r3, [r7, #5]
 800112e:	3301      	adds	r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2104      	movs	r1, #4
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff7a 	bl	8001034 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001140:	202b      	movs	r0, #43	; 0x2b
 8001142:	f7ff ff5d 	bl	8001000 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	331a      	adds	r3, #26
 800114a:	b2db      	uxtb	r3, r3
 800114c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800114e:	793b      	ldrb	r3, [r7, #4]
 8001150:	331a      	adds	r3, #26
 8001152:	b2db      	uxtb	r3, r3
 8001154:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2104      	movs	r1, #4
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff69 	bl	8001034 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001162:	202c      	movs	r0, #44	; 0x2c
 8001164:	f7ff ff4c 	bl	8001000 <ST7735_WriteCommand>
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}

08001170 <ST7735_Init>:

void ST7735_Init() {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001174:	f7ff ff18 	bl	8000fa8 <ST7735_Select>
    ST7735_Reset();
 8001178:	f7ff ff2e 	bl	8000fd8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <ST7735_Init+0x28>)
 800117e:	f7ff ff73 	bl	8001068 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <ST7735_Init+0x2c>)
 8001184:	f7ff ff70 	bl	8001068 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <ST7735_Init+0x30>)
 800118a:	f7ff ff6d 	bl	8001068 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800118e:	f7ff ff17 	bl	8000fc0 <ST7735_Unselect>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	08005f18 	.word	0x08005f18
 800119c:	08005f54 	.word	0x08005f54
 80011a0:	08005f64 	.word	0x08005f64

080011a4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011a4:	b082      	sub	sp, #8
 80011a6:	b590      	push	{r4, r7, lr}
 80011a8:	b089      	sub	sp, #36	; 0x24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	460b      	mov	r3, r1
 80011b4:	80bb      	strh	r3, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	b2d8      	uxtb	r0, r3
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	b2d9      	uxtb	r1, r3
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011ca:	4413      	add	r3, r2
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	3b01      	subs	r3, #1
 80011d0:	b2dc      	uxtb	r4, r3
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80011da:	4413      	add	r3, r2
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	3b01      	subs	r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4622      	mov	r2, r4
 80011e4:	f7ff ff88 	bl	80010f8 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	e043      	b.n	8001276 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80011ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	3b20      	subs	r3, #32
 80011f4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80011f8:	fb01 f303 	mul.w	r3, r1, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	440b      	add	r3, r1
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
 800120e:	e029      	b.n	8001264 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00e      	beq.n	800123e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001220:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	b29b      	uxth	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	743b      	strb	r3, [r7, #16]
 800122a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800122c:	b2db      	uxtb	r3, r3
 800122e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2102      	movs	r1, #2
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fefc 	bl	8001034 <ST7735_WriteData>
 800123c:	e00f      	b.n	800125e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800123e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	b29b      	uxth	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	733b      	strb	r3, [r7, #12]
 800124a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800124e:	b2db      	uxtb	r3, r3
 8001250:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	2102      	movs	r1, #2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff feeb 	bl	8001034 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	3301      	adds	r3, #1
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001268:	461a      	mov	r2, r3
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4293      	cmp	r3, r2
 800126e:	d3cf      	bcc.n	8001210 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	3301      	adds	r3, #1
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800127a:	461a      	mov	r2, r3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	4293      	cmp	r3, r2
 8001280:	d3b5      	bcc.n	80011ee <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001282:	bf00      	nop
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800128c:	b002      	add	sp, #8
 800128e:	4770      	bx	lr

08001290 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001290:	b082      	sub	sp, #8
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af04      	add	r7, sp, #16
 8001298:	603a      	str	r2, [r7, #0]
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	4603      	mov	r3, r0
 800129e:	80fb      	strh	r3, [r7, #6]
 80012a0:	460b      	mov	r3, r1
 80012a2:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80012a4:	f7ff fe80 	bl	8000fa8 <ST7735_Select>

    while(*str) {
 80012a8:	e02d      	b.n	8001306 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	7d3a      	ldrb	r2, [r7, #20]
 80012ae:	4413      	add	r3, r2
 80012b0:	2b9f      	cmp	r3, #159	; 0x9f
 80012b2:	dd13      	ble.n	80012dc <ST7735_WriteString+0x4c>
            x = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80012b8:	7d7b      	ldrb	r3, [r7, #21]
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80012c2:	88bb      	ldrh	r3, [r7, #4]
 80012c4:	7d7a      	ldrb	r2, [r7, #21]
 80012c6:	4413      	add	r3, r2
 80012c8:	2b4f      	cmp	r3, #79	; 0x4f
 80012ca:	dc21      	bgt.n	8001310 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b20      	cmp	r3, #32
 80012d2:	d103      	bne.n	80012dc <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	603b      	str	r3, [r7, #0]
                continue;
 80012da:	e014      	b.n	8001306 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	781a      	ldrb	r2, [r3, #0]
 80012e0:	88b9      	ldrh	r1, [r7, #4]
 80012e2:	88f8      	ldrh	r0, [r7, #6]
 80012e4:	8c3b      	ldrh	r3, [r7, #32]
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	8bbb      	ldrh	r3, [r7, #28]
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f7ff ff57 	bl	80011a4 <ST7735_WriteChar>
        x += font.width;
 80012f6:	7d3b      	ldrb	r3, [r7, #20]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	4413      	add	r3, r2
 80012fe:	80fb      	strh	r3, [r7, #6]
        str++;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1cd      	bne.n	80012aa <ST7735_WriteString+0x1a>
 800130e:	e000      	b.n	8001312 <ST7735_WriteString+0x82>
                break;
 8001310:	bf00      	nop
    }

    ST7735_Unselect();
 8001312:	f7ff fe55 	bl	8000fc0 <ST7735_Unselect>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001320:	b002      	add	sp, #8
 8001322:	4770      	bx	lr

08001324 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	4604      	mov	r4, r0
 800132c:	4608      	mov	r0, r1
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4623      	mov	r3, r4
 8001334:	80fb      	strh	r3, [r7, #6]
 8001336:	4603      	mov	r3, r0
 8001338:	80bb      	strh	r3, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	807b      	strh	r3, [r7, #2]
 800133e:	4613      	mov	r3, r2
 8001340:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	2b9f      	cmp	r3, #159	; 0x9f
 8001346:	d859      	bhi.n	80013fc <ST7735_FillRectangle+0xd8>
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	2b4f      	cmp	r3, #79	; 0x4f
 800134c:	d856      	bhi.n	80013fc <ST7735_FillRectangle+0xd8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	4413      	add	r3, r2
 8001354:	3b01      	subs	r3, #1
 8001356:	2b9f      	cmp	r3, #159	; 0x9f
 8001358:	dd03      	ble.n	8001362 <ST7735_FillRectangle+0x3e>
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001360:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001362:	88ba      	ldrh	r2, [r7, #4]
 8001364:	883b      	ldrh	r3, [r7, #0]
 8001366:	4413      	add	r3, r2
 8001368:	3b01      	subs	r3, #1
 800136a:	2b4f      	cmp	r3, #79	; 0x4f
 800136c:	dd03      	ble.n	8001376 <ST7735_FillRectangle+0x52>
 800136e:	88bb      	ldrh	r3, [r7, #4]
 8001370:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001374:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001376:	f7ff fe17 	bl	8000fa8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	b2d8      	uxtb	r0, r3
 800137e:	88bb      	ldrh	r3, [r7, #4]
 8001380:	b2d9      	uxtb	r1, r3
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b2db      	uxtb	r3, r3
 800138e:	3b01      	subs	r3, #1
 8001390:	b2dc      	uxtb	r4, r3
 8001392:	88bb      	ldrh	r3, [r7, #4]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	883b      	ldrh	r3, [r7, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4413      	add	r3, r2
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3b01      	subs	r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	4622      	mov	r2, r4
 80013a4:	f7ff fea8 	bl	80010f8 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80013a8:	8c3b      	ldrh	r3, [r7, #32]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	733b      	strb	r3, [r7, #12]
 80013b2:	8c3b      	ldrh	r3, [r7, #32]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2101      	movs	r1, #1
 80013bc:	4811      	ldr	r0, [pc, #68]	; (8001404 <ST7735_FillRectangle+0xe0>)
 80013be:	f001 fe78 	bl	80030b2 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80013c2:	883b      	ldrh	r3, [r7, #0]
 80013c4:	80bb      	strh	r3, [r7, #4]
 80013c6:	e013      	b.n	80013f0 <ST7735_FillRectangle+0xcc>
        for(x = w; x > 0; x--) {
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	80fb      	strh	r3, [r7, #6]
 80013cc:	e00a      	b.n	80013e4 <ST7735_FillRectangle+0xc0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80013ce:	f107 010c 	add.w	r1, r7, #12
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	2202      	movs	r2, #2
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <ST7735_FillRectangle+0xe4>)
 80013da:	f002 faf1 	bl	80039c0 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	80fb      	strh	r3, [r7, #6]
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f1      	bne.n	80013ce <ST7735_FillRectangle+0xaa>
    for(y = h; y > 0; y--) {
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	80bb      	strh	r3, [r7, #4]
 80013f0:	88bb      	ldrh	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1e8      	bne.n	80013c8 <ST7735_FillRectangle+0xa4>
        }
    }

    ST7735_Unselect();
 80013f6:	f7ff fde3 	bl	8000fc0 <ST7735_Unselect>
 80013fa:	e000      	b.n	80013fe <ST7735_FillRectangle+0xda>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80013fc:	bf00      	nop
}
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bd90      	pop	{r4, r7, pc}
 8001404:	40010c00 	.word	0x40010c00
 8001408:	200000ac 	.word	0x200000ac

0800140c <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2350      	movs	r3, #80	; 0x50
 800141c:	22a0      	movs	r2, #160	; 0xa0
 800141e:	2100      	movs	r1, #0
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff ff7f 	bl	8001324 <ST7735_FillRectangle>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001434:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8001438:	af16      	add	r7, sp, #88	; 0x58

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143a:	f001 fb61 	bl	8002b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143e:	f000 f9c9 	bl	80017d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001442:	f000 fa3b 	bl	80018bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001446:	f000 fa01 	bl	800184c <MX_SPI1_Init>
  ST7735_Init();
 800144a:	f7ff fe91 	bl	8001170 <ST7735_Init>
  /* USER CODE BEGIN 2 */
  int stoploop;

  int Plane_X, Plane_Y,Plane_pixelX, Plane_pixelY,Plane_speed,load_mass,Target_pixelX, Target_pixelY,location,cargo_pixelX, cargo_pixelY, vento = 0,direcao,cargo_Dropped = 0, shape = 0, ventoAjustado;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
  char char_string[64], char_qstring[64], char_mass[] = "MASSA DA CARGA\0", char_height[] = "ALTURA DO        AVIAO\0", char_speed[] = "VELOCIDADE DO    AVIAO\0",char_wind[] = "FORCA DO VENTO\0", char_diretion[] = "DIRECAO DO       VENTO\0",char_direita[] = "DIREITA \0", char_esquerda[] = "ESQUERDA\0";
 8001460:	4b40      	ldr	r3, [pc, #256]	; (8001564 <main+0x134>)
 8001462:	f507 7492 	add.w	r4, r7, #292	; 0x124
 8001466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800146c:	4b3e      	ldr	r3, [pc, #248]	; (8001568 <main+0x138>)
 800146e:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8001472:	461d      	mov	r5, r3
 8001474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001478:	e895 0003 	ldmia.w	r5, {r0, r1}
 800147c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001480:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001484:	4a39      	ldr	r2, [pc, #228]	; (800156c <main+0x13c>)
 8001486:	461c      	mov	r4, r3
 8001488:	4615      	mov	r5, r2
 800148a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001492:	e884 0003 	stmia.w	r4, {r0, r1}
 8001496:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800149a:	4a35      	ldr	r2, [pc, #212]	; (8001570 <main+0x140>)
 800149c:	461c      	mov	r4, r3
 800149e:	4613      	mov	r3, r2
 80014a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014aa:	4a32      	ldr	r2, [pc, #200]	; (8001574 <main+0x144>)
 80014ac:	461c      	mov	r4, r3
 80014ae:	4615      	mov	r5, r2
 80014b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80014bc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014c0:	4a2d      	ldr	r2, [pc, #180]	; (8001578 <main+0x148>)
 80014c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014c4:	c303      	stmia	r3!, {r0, r1}
 80014c6:	801a      	strh	r2, [r3, #0]
 80014c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014cc:	4a2b      	ldr	r2, [pc, #172]	; (800157c <main+0x14c>)
 80014ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d0:	c303      	stmia	r3!, {r0, r1}
 80014d2:	801a      	strh	r2, [r3, #0]
  char char_shape[] = "FORMATO DA CARGA\0", char_square[] = "QUADRADO\0", char_rec[] = "RETANGULO\0";
 80014d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014d8:	4a29      	ldr	r2, [pc, #164]	; (8001580 <main+0x150>)
 80014da:	461c      	mov	r4, r3
 80014dc:	4615      	mov	r5, r2
 80014de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e2:	682b      	ldr	r3, [r5, #0]
 80014e4:	8023      	strh	r3, [r4, #0]
 80014e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014ea:	4a26      	ldr	r2, [pc, #152]	; (8001584 <main+0x154>)
 80014ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ee:	c303      	stmia	r3!, {r0, r1}
 80014f0:	801a      	strh	r2, [r3, #0]
 80014f2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014f6:	4a24      	ldr	r2, [pc, #144]	; (8001588 <main+0x158>)
 80014f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014fa:	c303      	stmia	r3!, {r0, r1}
 80014fc:	801a      	strh	r2, [r3, #0]
 80014fe:	3302      	adds	r3, #2
 8001500:	0c12      	lsrs	r2, r2, #16
 8001502:	701a      	strb	r2, [r3, #0]

  InicializarSimulacao(&Plane_X, &Plane_Y,&Plane_pixelX, &Plane_pixelY,&Plane_speed,&load_mass,&Target_pixelX, &Target_pixelY, &location,&cargo_pixelX, &cargo_pixelY,&vento, &direcao, &stoploop, &cargo_Dropped);
 8001504:	f507 74f2 	add.w	r4, r7, #484	; 0x1e4
 8001508:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800150c:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8001510:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 8001514:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001518:	930a      	str	r3, [sp, #40]	; 0x28
 800151a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800151e:	9309      	str	r3, [sp, #36]	; 0x24
 8001520:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001524:	9308      	str	r3, [sp, #32]
 8001526:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800152a:	9307      	str	r3, [sp, #28]
 800152c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001530:	9306      	str	r3, [sp, #24]
 8001532:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001536:	9305      	str	r3, [sp, #20]
 8001538:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8001542:	9303      	str	r3, [sp, #12]
 8001544:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001548:	9302      	str	r3, [sp, #8]
 800154a:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	4623      	mov	r3, r4
 8001558:	f000 fa10 	bl	800197c <InicializarSimulacao>
  ST7735_FillScreen(BLACK);
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff ff55 	bl	800140c <ST7735_FillScreen>
  while (1)
  {
	  float tent_XFinal[3], tent_YFinal[3], tent_XTarget[3], tent_YTarget[3], tent_Raio[3], tent_Vento[3], tent_Direcao[3], tent_TempoEntrega[3],xFinal, yFinal, tempoFinal;
	  bool tent_Acerto[3];

	  while (stoploop < 3) {
 8001562:	e115      	b.n	8001790 <main+0x360>
 8001564:	08004844 	.word	0x08004844
 8001568:	08004854 	.word	0x08004854
 800156c:	0800486c 	.word	0x0800486c
 8001570:	08004884 	.word	0x08004884
 8001574:	08004894 	.word	0x08004894
 8001578:	080048ac 	.word	0x080048ac
 800157c:	080048b8 	.word	0x080048b8
 8001580:	080048c4 	.word	0x080048c4
 8001584:	080048d8 	.word	0x080048d8
 8001588:	080048e4 	.word	0x080048e4
		  cargo_Dropped = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		  ConfigurarParametros(char_qstring, char_string, &load_mass, &Plane_Y, &Plane_speed, &vento, &direcao, char_mass, char_height, char_speed, char_wind, char_esquerda, char_direita, char_diretion, &stoploop, &cargo_Dropped, &shape, char_shape, char_square, char_rec);
 8001592:	f507 74f6 	add.w	r4, r7, #492	; 0x1ec
 8001596:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 800159a:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 800159e:	f507 709a 	add.w	r0, r7, #308	; 0x134
 80015a2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80015a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015ac:	930e      	str	r3, [sp, #56]	; 0x38
 80015ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015b2:	930d      	str	r3, [sp, #52]	; 0x34
 80015b4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80015b8:	930c      	str	r3, [sp, #48]	; 0x30
 80015ba:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80015be:	930b      	str	r3, [sp, #44]	; 0x2c
 80015c0:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80015c4:	930a      	str	r3, [sp, #40]	; 0x28
 80015c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015ca:	9309      	str	r3, [sp, #36]	; 0x24
 80015cc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015d0:	9308      	str	r3, [sp, #32]
 80015d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015d6:	9307      	str	r3, [sp, #28]
 80015d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015dc:	9306      	str	r3, [sp, #24]
 80015de:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80015e2:	9305      	str	r3, [sp, #20]
 80015e4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80015e8:	9304      	str	r3, [sp, #16]
 80015ea:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80015ee:	9303      	str	r3, [sp, #12]
 80015f0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	4623      	mov	r3, r4
 8001604:	f000 fa4c 	bl	8001aa0 <ConfigurarParametros>
		  Shape_Select(shape, &cargo_pixelY, &ventoAjustado, vento);
 8001608:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 800160c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001610:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8001614:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8001618:	f000 fc70 	bl	8001efc <Shape_Select>
		  ST7735_FillScreen(BLACK);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fef5 	bl	800140c <ST7735_FillScreen>
		  Target_Spawn(&Target_pixelX,Target_pixelY,&location);
 8001622:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8001626:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 800162a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800162e:	4618      	mov	r0, r3
 8001630:	f000 ffd8 	bl	80025e4 <Target_Spawn>
		  Plane_Movement(&Plane_Y, Plane_speed, &Plane_X, Plane_pixelX, Plane_pixelY, location, cargo_pixelX, cargo_pixelY, ventoAjustado, &cargo_Dropped, load_mass, &xFinal, &yFinal, &tempoFinal);
 8001634:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 800163e:	60ba      	str	r2, [r7, #8]
 8001640:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001644:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001648:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800164c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001650:	f8d7 41b4 	ldr.w	r4, [r7, #436]	; 0x1b4
 8001654:	f8d7 51dc 	ldr.w	r5, [r7, #476]	; 0x1dc
 8001658:	f507 7ef8 	add.w	lr, r7, #496	; 0x1f0
 800165c:	f507 7cf6 	add.w	ip, r7, #492	; 0x1ec
 8001660:	f107 061c 	add.w	r6, r7, #28
 8001664:	9609      	str	r6, [sp, #36]	; 0x24
 8001666:	f107 0620 	add.w	r6, r7, #32
 800166a:	9608      	str	r6, [sp, #32]
 800166c:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8001670:	9607      	str	r6, [sp, #28]
 8001672:	9506      	str	r5, [sp, #24]
 8001674:	f507 75de 	add.w	r5, r7, #444	; 0x1bc
 8001678:	9505      	str	r5, [sp, #20]
 800167a:	9404      	str	r4, [sp, #16]
 800167c:	9003      	str	r0, [sp, #12]
 800167e:	9102      	str	r1, [sp, #8]
 8001680:	9201      	str	r2, [sp, #4]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	4672      	mov	r2, lr
 8001688:	6979      	ldr	r1, [r7, #20]
 800168a:	4660      	mov	r0, ip
 800168c:	f000 fc54 	bl	8001f38 <Plane_Movement>
		  RegistrarTentativa(stoploop, xFinal, yFinal, (float)Target_pixelX, (float)Target_pixelY, (((float)Target_pixelX + (float)Target_pixelX) / 2.0f), vento, direcao, tempoFinal, tent_XFinal, tent_YFinal, tent_XTarget, tent_YTarget, tent_Raio, tent_Vento, tent_Direcao, tent_TempoEntrega, tent_Acerto);
 8001690:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe feb9 	bl	8000414 <__aeabi_f2d>
 80016a2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe feb1 	bl	8000414 <__aeabi_f2d>
 80016b2:	4604      	mov	r4, r0
 80016b4:	460d      	mov	r5, r1
 80016b6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fa1e 	bl	8000afc <__aeabi_i2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fea6 	bl	8000414 <__aeabi_f2d>
 80016c8:	4680      	mov	r8, r0
 80016ca:	4689      	mov	r9, r1
 80016cc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa13 	bl	8000afc <__aeabi_i2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fe9b 	bl	8000414 <__aeabi_f2d>
 80016de:	4682      	mov	sl, r0
 80016e0:	468b      	mov	fp, r1
 80016e2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fa08 	bl	8000afc <__aeabi_i2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4619      	mov	r1, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f94f 	bl	8000994 <__addsf3>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb05 	bl	8000d0c <__aeabi_fdiv>
 8001702:	4603      	mov	r3, r0
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe fe85 	bl	8000414 <__aeabi_f2d>
 800170a:	e9c7 0100 	strd	r0, r1, [r7]
 800170e:	f8d7 61c4 	ldr.w	r6, [r7, #452]	; 0x1c4
 8001712:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8001716:	6139      	str	r1, [r7, #16]
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fe78 	bl	8000414 <__aeabi_f2d>
 8001724:	460a      	mov	r2, r1
 8001726:	4601      	mov	r1, r0
 8001728:	f107 0318 	add.w	r3, r7, #24
 800172c:	9314      	str	r3, [sp, #80]	; 0x50
 800172e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001732:	9313      	str	r3, [sp, #76]	; 0x4c
 8001734:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001738:	9312      	str	r3, [sp, #72]	; 0x48
 800173a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800173e:	9311      	str	r3, [sp, #68]	; 0x44
 8001740:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001744:	9310      	str	r3, [sp, #64]	; 0x40
 8001746:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800174a:	930f      	str	r3, [sp, #60]	; 0x3c
 800174c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001750:	930e      	str	r3, [sp, #56]	; 0x38
 8001752:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001756:	930d      	str	r3, [sp, #52]	; 0x34
 8001758:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800175c:	930c      	str	r3, [sp, #48]	; 0x30
 800175e:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8001762:	6939      	ldr	r1, [r7, #16]
 8001764:	9109      	str	r1, [sp, #36]	; 0x24
 8001766:	9608      	str	r6, [sp, #32]
 8001768:	e9d7 1200 	ldrd	r1, r2, [r7]
 800176c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8001770:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001774:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001778:	e9cd 4500 	strd	r4, r5, [sp]
 800177c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001780:	6978      	ldr	r0, [r7, #20]
 8001782:	f000 fcf5 	bl	8002170 <RegistrarTentativa>
		  stoploop++;
 8001786:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800178a:	3301      	adds	r3, #1
 800178c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	  while (stoploop < 3) {
 8001790:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001794:	2b02      	cmp	r3, #2
 8001796:	f77f aef9 	ble.w	800158c <main+0x15c>
	  }

	  ExibirResumoFinal(3, tent_XFinal, tent_YFinal, tent_XTarget, tent_YTarget, tent_Raio, tent_Vento, tent_Direcao, tent_TempoEntrega, tent_Acerto);
 800179a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800179e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80017a2:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	9305      	str	r3, [sp, #20]
 80017ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b0:	9304      	str	r3, [sp, #16]
 80017b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b6:	9303      	str	r3, [sp, #12]
 80017b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	4603      	mov	r3, r0
 80017cc:	2003      	movs	r0, #3
 80017ce:	f000 fd1f 	bl	8002210 <ExibirResumoFinal>
  {
 80017d2:	e6c6      	b.n	8001562 <main+0x132>

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b090      	sub	sp, #64	; 0x40
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	2228      	movs	r2, #40	; 0x28
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fb00 	bl	8003de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fa:	2301      	movs	r3, #1
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fe:	2310      	movs	r3, #16
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	f107 0318 	add.w	r3, r7, #24
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fc6a 	bl	80030e4 <HAL_RCC_OscConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001816:	f001 f875 	bl	8002904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	230f      	movs	r3, #15
 800181c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f001 fed6 	bl	80035e4 <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800183e:	f001 f861 	bl	8002904 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3740      	adds	r7, #64	; 0x40
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001852:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <MX_SPI1_Init+0x6c>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800185c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001860:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001864:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_SPI1_Init+0x68>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_SPI1_Init+0x68>)
 800187a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001882:	2220      	movs	r2, #32
 8001884:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_SPI1_Init+0x68>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_SPI1_Init+0x68>)
 800189a:	220a      	movs	r2, #10
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_SPI1_Init+0x68>)
 80018a0:	f002 f80a 	bl	80038b8 <HAL_SPI_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80018aa:	f001 f82b 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200000ac 	.word	0x200000ac
 80018b8:	40013000 	.word	0x40013000

080018bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <MX_GPIO_Init+0xb4>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a26      	ldr	r2, [pc, #152]	; (8001970 <MX_GPIO_Init+0xb4>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <MX_GPIO_Init+0xb4>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <MX_GPIO_Init+0xb4>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a20      	ldr	r2, [pc, #128]	; (8001970 <MX_GPIO_Init+0xb4>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <MX_GPIO_Init+0xb4>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2110      	movs	r1, #16
 8001904:	481b      	ldr	r0, [pc, #108]	; (8001974 <MX_GPIO_Init+0xb8>)
 8001906:	f001 fbd4 	bl	80030b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2103      	movs	r1, #3
 800190e:	481a      	ldr	r0, [pc, #104]	; (8001978 <MX_GPIO_Init+0xbc>)
 8001910:	f001 fbcf 	bl	80030b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 8001914:	2310      	movs	r3, #16
 8001916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2302      	movs	r3, #2
 8001922:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4619      	mov	r1, r3
 800192a:	4812      	ldr	r0, [pc, #72]	; (8001974 <MX_GPIO_Init+0xb8>)
 800192c:	f001 fa50 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin;
 8001930:	2303      	movs	r3, #3
 8001932:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2302      	movs	r3, #2
 800193e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4619      	mov	r1, r3
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_GPIO_Init+0xbc>)
 8001948:	f001 fa42 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800194c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001950:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001956:	2301      	movs	r3, #1
 8001958:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4619      	mov	r1, r3
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <MX_GPIO_Init+0xb8>)
 8001962:	f001 fa35 	bl	8002dd0 <HAL_GPIO_Init>

}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	40010800 	.word	0x40010800
 8001978:	40010c00 	.word	0x40010c00

0800197c <InicializarSimulacao>:

/* USER CODE BEGIN 4 */
void InicializarSimulacao(int *Plane_X, int *Plane_Y,int *Plane_pixelX, int *Plane_pixelY,int *Plane_speed,int *load_mass,int *Target_pixelX, int *Target_pixelY,int *location,int *cargo_pixelX, int *cargo_pixelY,int *vento, int *direcao, int *stoploop, int *cargo_Dropped){
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af04      	add	r7, sp, #16
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
	*Plane_X = 1;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]
	*Plane_Y = 30;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	221e      	movs	r2, #30
 8001994:	601a      	str	r2, [r3, #0]
	*Plane_pixelX = 15;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	220f      	movs	r2, #15
 800199a:	601a      	str	r2, [r3, #0]
	*Plane_pixelY = 5;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2205      	movs	r2, #5
 80019a0:	601a      	str	r2, [r3, #0]
	*Plane_speed = 3;
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	2203      	movs	r2, #3
 80019a6:	601a      	str	r2, [r3, #0]
	*load_mass = 0;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
	*Target_pixelX = 5;
 80019ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b0:	2205      	movs	r2, #5
 80019b2:	601a      	str	r2, [r3, #0]
	*Target_pixelY = 2;
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	2202      	movs	r2, #2
 80019b8:	601a      	str	r2, [r3, #0]
	*location = 0;
 80019ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
	*cargo_pixelX = 2;
 80019c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c2:	2202      	movs	r2, #2
 80019c4:	601a      	str	r2, [r3, #0]
	*cargo_pixelY = 2;
 80019c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
	*vento = 20;
 80019cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ce:	2214      	movs	r2, #20
 80019d0:	601a      	str	r2, [r3, #0]
	*direcao = 1;
 80019d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
	*cargo_Dropped = 0;
 80019d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
	*stoploop = 0;
 80019de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

	ST7735_FillScreen(BLACK);
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fd11 	bl	800140c <ST7735_FillScreen>
	ST7735_WriteString(20, 10, "SIMULADOR: ENTREGA", Font_7x10, WHITE, BLACK);
 80019ea:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <InicializarSimulacao+0x110>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	9202      	str	r2, [sp, #8]
 80019f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f4:	9201      	str	r2, [sp, #4]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	9200      	str	r2, [sp, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a24      	ldr	r2, [pc, #144]	; (8001a90 <InicializarSimulacao+0x114>)
 80019fe:	210a      	movs	r1, #10
 8001a00:	2014      	movs	r0, #20
 8001a02:	f7ff fc45 	bl	8001290 <ST7735_WriteString>
	ST7735_WriteString(20, 20, "DE SUPRIMENTOS", Font_7x10, WHITE, BLACK);
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <InicializarSimulacao+0x110>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	9202      	str	r2, [sp, #8]
 8001a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a10:	9201      	str	r2, [sp, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	9200      	str	r2, [sp, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <InicializarSimulacao+0x118>)
 8001a1a:	2114      	movs	r1, #20
 8001a1c:	2014      	movs	r0, #20
 8001a1e:	f7ff fc37 	bl	8001290 <ST7735_WriteString>
	HAL_Delay(2000);
 8001a22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a26:	f001 f8cd 	bl	8002bc4 <HAL_Delay>
	ST7735_WriteString(20, 20, "DE SUPRIMENTOS", Font_7x10, BLACK, BLACK);
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <InicializarSimulacao+0x110>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	9202      	str	r2, [sp, #8]
 8001a30:	2200      	movs	r2, #0
 8001a32:	9201      	str	r2, [sp, #4]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	9200      	str	r2, [sp, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a16      	ldr	r2, [pc, #88]	; (8001a94 <InicializarSimulacao+0x118>)
 8001a3c:	2114      	movs	r1, #20
 8001a3e:	2014      	movs	r0, #20
 8001a40:	f7ff fc26 	bl	8001290 <ST7735_WriteString>
	ST7735_WriteString(10, 10, "PRESSIONE PA10 PARA    CONTINUAR", Font_7x10, WHITE, BLACK);
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <InicializarSimulacao+0x110>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	9202      	str	r2, [sp, #8]
 8001a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4e:	9201      	str	r2, [sp, #4]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	9200      	str	r2, [sp, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <InicializarSimulacao+0x11c>)
 8001a58:	210a      	movs	r1, #10
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f7ff fc18 	bl	8001290 <ST7735_WriteString>
	int buttonCheck = -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	617b      	str	r3, [r7, #20]
	while (buttonCheck == -1) if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0) buttonCheck = 0;
 8001a66:	e009      	b.n	8001a7c <InicializarSimulacao+0x100>
 8001a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a6c:	480b      	ldr	r0, [pc, #44]	; (8001a9c <InicializarSimulacao+0x120>)
 8001a6e:	f001 fb09 	bl	8003084 <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <InicializarSimulacao+0x100>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a82:	d0f1      	beq.n	8001a68 <InicializarSimulacao+0xec>
}
 8001a84:	bf00      	nop
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	080048f0 	.word	0x080048f0
 8001a94:	08004904 	.word	0x08004904
 8001a98:	08004914 	.word	0x08004914
 8001a9c:	40010800 	.word	0x40010800

08001aa0 <ConfigurarParametros>:

void ConfigurarParametros (char *char_qstring, char *char_string, int* c_mass, int* p_height, int* p_speed, int* p_wind, int* p_windDirection, char* char_mass, char* char_height, char* char_speed, char* char_wind, char* char_esquerda, char* char_direita, char* char_diretion, int* stoploop, int*cargo_Dropped, int* shape, char* char_shape, char* char_square, char* char_rec) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af04      	add	r7, sp, #16
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
		Option_Input(char_qstring, char_string,c_mass,char_mass);
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f82d 	bl	8001b14 <Option_Input>
		Option_Input(char_qstring, char_string,p_height, char_height);
 8001aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f827 	bl	8001b14 <Option_Input>
		Option_Input(char_qstring, char_string,p_speed, char_speed);
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f821 	bl	8001b14 <Option_Input>
		Option_Input(char_qstring, char_string,p_wind, char_wind);
 8001ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f81b 	bl	8001b14 <Option_Input>
		Bool_Option_Input(char_qstring, char_string,p_windDirection, char_diretion, char_esquerda, char_direita, p_wind);
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aec:	6a3a      	ldr	r2, [r7, #32]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f8ed 	bl	8001cd0 <Bool_Option_Input>
		Bool_Option_Input(char_qstring, char_string, &shape, char_shape, char_square, char_rec);
 8001af6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f8e2 	bl	8001cd0 <Bool_Option_Input>
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <Option_Input>:

void Option_Input(char *char_qstring, char *char_string, int *variable, char *char_x)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af04      	add	r7, sp, #16
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
	int lm_button_check = -1, tempcheck_lm = -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	61bb      	str	r3, [r7, #24]
	int maxValue = -1, minValue  = -1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	613b      	str	r3, [r7, #16]
	while (tempcheck_lm == -1) {
 8001b3a:	e0af      	b.n	8001c9c <Option_Input+0x188>
		ST7735_FillScreen(BLACK);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff fc65 	bl	800140c <ST7735_FillScreen>
		sprintf(char_qstring,"QUAL A %s?", char_x);
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	495a      	ldr	r1, [pc, #360]	; (8001cb0 <Option_Input+0x19c>)
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f002 fa74 	bl	8004034 <siprintf>
		ST7735_WriteString(5, 10, char_qstring, Font_7x10, WHITE, BLACK);
 8001b4c:	4b59      	ldr	r3, [pc, #356]	; (8001cb4 <Option_Input+0x1a0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	9202      	str	r2, [sp, #8]
 8001b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b56:	9201      	str	r2, [sp, #4]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	9200      	str	r2, [sp, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	210a      	movs	r1, #10
 8001b62:	2005      	movs	r0, #5
 8001b64:	f7ff fb94 	bl	8001290 <ST7735_WriteString>
		ST7735_WriteString(10, 35, "-", Font_11x18, WHITE, BLACK);
 8001b68:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <Option_Input+0x1a4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	9202      	str	r2, [sp, #8]
 8001b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b72:	9201      	str	r2, [sp, #4]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	9200      	str	r2, [sp, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a50      	ldr	r2, [pc, #320]	; (8001cbc <Option_Input+0x1a8>)
 8001b7c:	2123      	movs	r1, #35	; 0x23
 8001b7e:	200a      	movs	r0, #10
 8001b80:	f7ff fb86 	bl	8001290 <ST7735_WriteString>
		ST7735_WriteString(145, 40, "+", Font_11x18, WHITE, BLACK);
 8001b84:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <Option_Input+0x1a4>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	9202      	str	r2, [sp, #8]
 8001b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8e:	9201      	str	r2, [sp, #4]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	9200      	str	r2, [sp, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a4a      	ldr	r2, [pc, #296]	; (8001cc0 <Option_Input+0x1ac>)
 8001b98:	2128      	movs	r1, #40	; 0x28
 8001b9a:	2091      	movs	r0, #145	; 0x91
 8001b9c:	f7ff fb78 	bl	8001290 <ST7735_WriteString>
		ST7735_WriteString(48, 70, "CONFIRMAR", Font_7x10, WHITE, BLACK);
 8001ba0:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <Option_Input+0x1a0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	9202      	str	r2, [sp, #8]
 8001ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001baa:	9201      	str	r2, [sp, #4]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	9200      	str	r2, [sp, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a44      	ldr	r2, [pc, #272]	; (8001cc4 <Option_Input+0x1b0>)
 8001bb4:	2146      	movs	r1, #70	; 0x46
 8001bb6:	2030      	movs	r0, #48	; 0x30
 8001bb8:	f7ff fb6a 	bl	8001290 <ST7735_WriteString>
		sprintf(char_string, "%2d", *variable);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4941      	ldr	r1, [pc, #260]	; (8001cc8 <Option_Input+0x1b4>)
 8001bc4:	68b8      	ldr	r0, [r7, #8]
 8001bc6:	f002 fa35 	bl	8004034 <siprintf>
		ST7735_WriteString(65, 35, char_string, Font_11x18, WHITE, BLACK);
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <Option_Input+0x1a4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	9202      	str	r2, [sp, #8]
 8001bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd4:	9201      	str	r2, [sp, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	9200      	str	r2, [sp, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	2123      	movs	r1, #35	; 0x23
 8001be0:	2041      	movs	r0, #65	; 0x41
 8001be2:	f7ff fb55 	bl	8001290 <ST7735_WriteString>

		while (lm_button_check == -1) {
 8001be6:	e055      	b.n	8001c94 <Option_Input+0x180>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) {
 8001be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bec:	4837      	ldr	r0, [pc, #220]	; (8001ccc <Option_Input+0x1b8>)
 8001bee:	f001 fa49 	bl	8003084 <HAL_GPIO_ReadPin>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11c      	bne.n	8001c32 <Option_Input+0x11e>
				(*variable)--;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	601a      	str	r2, [r3, #0]
				sprintf(char_string, "%2d", *variable);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	492f      	ldr	r1, [pc, #188]	; (8001cc8 <Option_Input+0x1b4>)
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	f002 fa12 	bl	8004034 <siprintf>
				ST7735_WriteString(65, 35, char_string, Font_11x18, WHITE, BLACK);
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <Option_Input+0x1a4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	9202      	str	r2, [sp, #8]
 8001c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1a:	9201      	str	r2, [sp, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	9200      	str	r2, [sp, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	2123      	movs	r1, #35	; 0x23
 8001c26:	2041      	movs	r0, #65	; 0x41
 8001c28:	f7ff fb32 	bl	8001290 <ST7735_WriteString>
				HAL_Delay(250);
 8001c2c:	20fa      	movs	r0, #250	; 0xfa
 8001c2e:	f000 ffc9 	bl	8002bc4 <HAL_Delay>
			}
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0) {
 8001c32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c36:	4825      	ldr	r0, [pc, #148]	; (8001ccc <Option_Input+0x1b8>)
 8001c38:	f001 fa24 	bl	8003084 <HAL_GPIO_ReadPin>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d11c      	bne.n	8001c7c <Option_Input+0x168>
				(*variable)++;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	601a      	str	r2, [r3, #0]
				sprintf(char_string, "%2d", *variable);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	491d      	ldr	r1, [pc, #116]	; (8001cc8 <Option_Input+0x1b4>)
 8001c54:	68b8      	ldr	r0, [r7, #8]
 8001c56:	f002 f9ed 	bl	8004034 <siprintf>
				ST7735_WriteString(65, 35, char_string, Font_11x18, WHITE, BLACK);
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <Option_Input+0x1a4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	9202      	str	r2, [sp, #8]
 8001c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c64:	9201      	str	r2, [sp, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	9200      	str	r2, [sp, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	2123      	movs	r1, #35	; 0x23
 8001c70:	2041      	movs	r0, #65	; 0x41
 8001c72:	f7ff fb0d 	bl	8001290 <ST7735_WriteString>
				HAL_Delay(250);
 8001c76:	20fa      	movs	r0, #250	; 0xfa
 8001c78:	f000 ffa4 	bl	8002bc4 <HAL_Delay>
			}
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0) {
 8001c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c80:	4812      	ldr	r0, [pc, #72]	; (8001ccc <Option_Input+0x1b8>)
 8001c82:	f001 f9ff 	bl	8003084 <HAL_GPIO_ReadPin>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d103      	bne.n	8001c94 <Option_Input+0x180>
				lm_button_check = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
				tempcheck_lm = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
		while (lm_button_check == -1) {
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9a:	d0a5      	beq.n	8001be8 <Option_Input+0xd4>
	while (tempcheck_lm == -1) {
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca2:	f43f af4b 	beq.w	8001b3c <Option_Input+0x28>
			}
		}
	}
}
 8001ca6:	bf00      	nop
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	08004938 	.word	0x08004938
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	08004944 	.word	0x08004944
 8001cc0:	08004948 	.word	0x08004948
 8001cc4:	0800494c 	.word	0x0800494c
 8001cc8:	08004958 	.word	0x08004958
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <Bool_Option_Input>:

void Bool_Option_Input(char *char_qstring, char *char_string,int *variable, char *char_x, char *option1, char *option2, int *value)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af04      	add	r7, sp, #16
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
	int lm_button_check = -1, tempcheck_lm = -1, tempvalue = *value;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	623b      	str	r3, [r7, #32]
 8001cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61fb      	str	r3, [r7, #28]
	int maxValue = 1, minValue = 0;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
	while (tempcheck_lm == -1) {
 8001cf8:	e0e5      	b.n	8001ec6 <Bool_Option_Input+0x1f6>
		tempcheck_lm = -1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	623b      	str	r3, [r7, #32]
		ST7735_FillScreen(BLACK);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff fb83 	bl	800140c <ST7735_FillScreen>
		snprintf(char_qstring, 64, "QUAL A %s?", char_x);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	4a73      	ldr	r2, [pc, #460]	; (8001ed8 <Bool_Option_Input+0x208>)
 8001d0a:	2140      	movs	r1, #64	; 0x40
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f002 f95d 	bl	8003fcc <sniprintf>
		ST7735_WriteString(5, 10, char_qstring, Font_7x10, WHITE, BLACK);
 8001d12:	4b72      	ldr	r3, [pc, #456]	; (8001edc <Bool_Option_Input+0x20c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	9202      	str	r2, [sp, #8]
 8001d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d1c:	9201      	str	r2, [sp, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	9200      	str	r2, [sp, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	210a      	movs	r1, #10
 8001d28:	2005      	movs	r0, #5
 8001d2a:	f7ff fab1 	bl	8001290 <ST7735_WriteString>
		ST7735_WriteString(10, 35, "<-", Font_11x18, WHITE, BLACK);
 8001d2e:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <Bool_Option_Input+0x210>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	9202      	str	r2, [sp, #8]
 8001d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d38:	9201      	str	r2, [sp, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	9200      	str	r2, [sp, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a68      	ldr	r2, [pc, #416]	; (8001ee4 <Bool_Option_Input+0x214>)
 8001d42:	2123      	movs	r1, #35	; 0x23
 8001d44:	200a      	movs	r0, #10
 8001d46:	f7ff faa3 	bl	8001290 <ST7735_WriteString>
		ST7735_WriteString(135, 35, "->", Font_11x18, WHITE, BLACK);
 8001d4a:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <Bool_Option_Input+0x210>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	9202      	str	r2, [sp, #8]
 8001d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d54:	9201      	str	r2, [sp, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	9200      	str	r2, [sp, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a62      	ldr	r2, [pc, #392]	; (8001ee8 <Bool_Option_Input+0x218>)
 8001d5e:	2123      	movs	r1, #35	; 0x23
 8001d60:	2087      	movs	r0, #135	; 0x87
 8001d62:	f7ff fa95 	bl	8001290 <ST7735_WriteString>
		ST7735_WriteString(48, 70, "CONFIRMAR", Font_7x10, WHITE, BLACK);
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <Bool_Option_Input+0x20c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	9202      	str	r2, [sp, #8]
 8001d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d70:	9201      	str	r2, [sp, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	9200      	str	r2, [sp, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a5c      	ldr	r2, [pc, #368]	; (8001eec <Bool_Option_Input+0x21c>)
 8001d7a:	2146      	movs	r1, #70	; 0x46
 8001d7c:	2030      	movs	r0, #48	; 0x30
 8001d7e:	f7ff fa87 	bl	8001290 <ST7735_WriteString>

		memset(char_string, 0, 64);
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	2100      	movs	r1, #0
 8001d86:	68b8      	ldr	r0, [r7, #8]
 8001d88:	f002 f82e 	bl	8003de8 <memset>
		ST7735_WriteString(70, 35, "-", Font_7x10, WHITE, BLACK);
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <Bool_Option_Input+0x20c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	9202      	str	r2, [sp, #8]
 8001d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d96:	9201      	str	r2, [sp, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	9200      	str	r2, [sp, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a54      	ldr	r2, [pc, #336]	; (8001ef0 <Bool_Option_Input+0x220>)
 8001da0:	2123      	movs	r1, #35	; 0x23
 8001da2:	2046      	movs	r0, #70	; 0x46
 8001da4:	f7ff fa74 	bl	8001290 <ST7735_WriteString>
		while (lm_button_check == -1) {
 8001da8:	e088      	b.n	8001ebc <Bool_Option_Input+0x1ec>
			lm_button_check = -1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) {
 8001db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db4:	484f      	ldr	r0, [pc, #316]	; (8001ef4 <Bool_Option_Input+0x224>)
 8001db6:	f001 f965 	bl	8003084 <HAL_GPIO_ReadPin>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d12b      	bne.n	8001e18 <Bool_Option_Input+0x148>
				*variable = 0;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
                memset(char_string, 0, 64);
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	2100      	movs	r1, #0
 8001dca:	68b8      	ldr	r0, [r7, #8]
 8001dcc:	f002 f80c 	bl	8003de8 <memset>
                snprintf(char_string, 64, "%s", option1);
 8001dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd2:	4a49      	ldr	r2, [pc, #292]	; (8001ef8 <Bool_Option_Input+0x228>)
 8001dd4:	2140      	movs	r1, #64	; 0x40
 8001dd6:	68b8      	ldr	r0, [r7, #8]
 8001dd8:	f002 f8f8 	bl	8003fcc <sniprintf>
				ST7735_WriteString(50, 40, char_string, Font_7x10, BLACK, BLACK);
 8001ddc:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <Bool_Option_Input+0x20c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	9202      	str	r2, [sp, #8]
 8001de2:	2200      	movs	r2, #0
 8001de4:	9201      	str	r2, [sp, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	9200      	str	r2, [sp, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	2128      	movs	r1, #40	; 0x28
 8001df0:	2032      	movs	r0, #50	; 0x32
 8001df2:	f7ff fa4d 	bl	8001290 <ST7735_WriteString>
				ST7735_WriteString(50, 40, char_string, Font_7x10, WHITE, BLACK);
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <Bool_Option_Input+0x20c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	9202      	str	r2, [sp, #8]
 8001dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e00:	9201      	str	r2, [sp, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	9200      	str	r2, [sp, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	2128      	movs	r1, #40	; 0x28
 8001e0c:	2032      	movs	r0, #50	; 0x32
 8001e0e:	f7ff fa3f 	bl	8001290 <ST7735_WriteString>
				HAL_Delay(250);
 8001e12:	20fa      	movs	r0, #250	; 0xfa
 8001e14:	f000 fed6 	bl	8002bc4 <HAL_Delay>
			}
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0) {
 8001e18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e1c:	4835      	ldr	r0, [pc, #212]	; (8001ef4 <Bool_Option_Input+0x224>)
 8001e1e:	f001 f931 	bl	8003084 <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d12b      	bne.n	8001e80 <Bool_Option_Input+0x1b0>
				*variable = 1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
                memset(char_string, 0, 64);
 8001e2e:	2240      	movs	r2, #64	; 0x40
 8001e30:	2100      	movs	r1, #0
 8001e32:	68b8      	ldr	r0, [r7, #8]
 8001e34:	f001 ffd8 	bl	8003de8 <memset>
                snprintf(char_string, 64, "%s", option2);
 8001e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3a:	4a2f      	ldr	r2, [pc, #188]	; (8001ef8 <Bool_Option_Input+0x228>)
 8001e3c:	2140      	movs	r1, #64	; 0x40
 8001e3e:	68b8      	ldr	r0, [r7, #8]
 8001e40:	f002 f8c4 	bl	8003fcc <sniprintf>
                ST7735_WriteString(50, 40, char_string, Font_7x10, BLACK, BLACK);
 8001e44:	4b25      	ldr	r3, [pc, #148]	; (8001edc <Bool_Option_Input+0x20c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	9202      	str	r2, [sp, #8]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	9201      	str	r2, [sp, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	9200      	str	r2, [sp, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	2128      	movs	r1, #40	; 0x28
 8001e58:	2032      	movs	r0, #50	; 0x32
 8001e5a:	f7ff fa19 	bl	8001290 <ST7735_WriteString>
                ST7735_WriteString(50, 40, char_string, Font_7x10, WHITE, BLACK);
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <Bool_Option_Input+0x20c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	9202      	str	r2, [sp, #8]
 8001e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e68:	9201      	str	r2, [sp, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	9200      	str	r2, [sp, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	2128      	movs	r1, #40	; 0x28
 8001e74:	2032      	movs	r0, #50	; 0x32
 8001e76:	f7ff fa0b 	bl	8001290 <ST7735_WriteString>
				HAL_Delay(250);
 8001e7a:	20fa      	movs	r0, #250	; 0xfa
 8001e7c:	f000 fea2 	bl	8002bc4 <HAL_Delay>
			}

			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0) {
 8001e80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e84:	481b      	ldr	r0, [pc, #108]	; (8001ef4 <Bool_Option_Input+0x224>)
 8001e86:	f001 f8fd 	bl	8003084 <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d115      	bne.n	8001ebc <Bool_Option_Input+0x1ec>
				if (*variable == 0 && value != NULL) *value = -tempvalue;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <Bool_Option_Input+0x1d8>
 8001e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <Bool_Option_Input+0x1d8>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	425a      	negs	r2, r3
 8001ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e005      	b.n	8001eb4 <Bool_Option_Input+0x1e4>
				else if (value != NULL) *value = tempvalue;
 8001ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <Bool_Option_Input+0x1e4>
 8001eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	601a      	str	r2, [r3, #0]
				lm_button_check = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
				tempcheck_lm = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
		while (lm_button_check == -1) {
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec2:	f43f af72 	beq.w	8001daa <Bool_Option_Input+0xda>
	while (tempcheck_lm == -1) {
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	f43f af15 	beq.w	8001cfa <Bool_Option_Input+0x2a>
			}
		}
	}
}
 8001ed0:	bf00      	nop
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	08004938 	.word	0x08004938
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	0800495c 	.word	0x0800495c
 8001ee8:	08004960 	.word	0x08004960
 8001eec:	0800494c 	.word	0x0800494c
 8001ef0:	08004944 	.word	0x08004944
 8001ef4:	40010800 	.word	0x40010800
 8001ef8:	08004964 	.word	0x08004964

08001efc <Shape_Select>:

void Shape_Select(int shape, int *cargo_pixelY, int *ventoAjustado, int ventoOriginal) {
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
    if (shape == 1) {
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <Shape_Select+0x24>
        *ventoAjustado = 2 * ventoOriginal;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	005a      	lsls	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]
        *cargo_pixelY = 4;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	601a      	str	r2, [r3, #0]
    } else {
        *ventoAjustado = ventoOriginal;
        *cargo_pixelY = 2;
    }
}
 8001f1e:	e005      	b.n	8001f2c <Shape_Select+0x30>
        *ventoAjustado = ventoOriginal;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]
        *cargo_pixelY = 2;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
	...

08001f38 <Plane_Movement>:

void Plane_Movement(int *Plane_Y, int Plane_speed, int *Plane_X, int Plane_pixelX, int Plane_pixelY, int location, int cargo_pixelX, int cargo_pixelY, int vento, int *cargo_Dropped, int load_mass, float* xFinal, float* yFinal, float* tempoFinal) {
 8001f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3a:	b095      	sub	sp, #84	; 0x54
 8001f3c:	af0a      	add	r7, sp, #40	; 0x28
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
	float dist_x, g = 9.8;
 8001f46:	4b6b      	ldr	r3, [pc, #428]	; (80020f4 <Plane_Movement+0x1bc>)
 8001f48:	623b      	str	r3, [r7, #32]
    float fall = sqrtf(2.0f * (75.0f - *Plane_Y) / g);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fdd4 	bl	8000afc <__aeabi_i2f>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4619      	mov	r1, r3
 8001f58:	4867      	ldr	r0, [pc, #412]	; (80020f8 <Plane_Movement+0x1c0>)
 8001f5a:	f7fe fd19 	bl	8000990 <__aeabi_fsub>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4619      	mov	r1, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fd16 	bl	8000994 <__addsf3>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	6a39      	ldr	r1, [r7, #32]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fecd 	bl	8000d0c <__aeabi_fdiv>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 fbb9 	bl	80046ec <sqrtf>
 8001f7a:	61f8      	str	r0, [r7, #28]
    float drop_X = (float)location - ((Plane_speed + (float)vento * (1/load_mass)) * fall);
 8001f7c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001f7e:	f7fe fdbd 	bl	8000afc <__aeabi_i2f>
 8001f82:	4604      	mov	r4, r0
 8001f84:	68b8      	ldr	r0, [r7, #8]
 8001f86:	f7fe fdb9 	bl	8000afc <__aeabi_i2f>
 8001f8a:	4605      	mov	r5, r0
 8001f8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f8e:	f7fe fdb5 	bl	8000afc <__aeabi_i2f>
 8001f92:	4606      	mov	r6, r0
 8001f94:	2201      	movs	r2, #1
 8001f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f98:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fdad 	bl	8000afc <__aeabi_i2f>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4630      	mov	r0, r6
 8001fa8:	f7fe fdfc 	bl	8000ba4 <__aeabi_fmul>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f7fe fcef 	bl	8000994 <__addsf3>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	69f9      	ldr	r1, [r7, #28]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fdf2 	bl	8000ba4 <__aeabi_fmul>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7fe fce3 	bl	8000990 <__aeabi_fsub>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	61bb      	str	r3, [r7, #24]
	dist_x = Plane_speed * sqrtf(2.0f * (75.0f - *Plane_Y));
 8001fce:	68b8      	ldr	r0, [r7, #8]
 8001fd0:	f7fe fd94 	bl	8000afc <__aeabi_i2f>
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fd8e 	bl	8000afc <__aeabi_i2f>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4844      	ldr	r0, [pc, #272]	; (80020f8 <Plane_Movement+0x1c0>)
 8001fe6:	f7fe fcd3 	bl	8000990 <__aeabi_fsub>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4619      	mov	r1, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fcd0 	bl	8000994 <__addsf3>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f002 fb78 	bl	80046ec <sqrtf>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4619      	mov	r1, r3
 8002000:	4620      	mov	r0, r4
 8002002:	f7fe fdcf 	bl	8000ba4 <__aeabi_fmul>
 8002006:	4603      	mov	r3, r0
 8002008:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < 180; i += (Plane_speed)) {
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
 800200e:	e069      	b.n	80020e4 <Plane_Movement+0x1ac>
		if (*cargo_Dropped == 0) {
 8002010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d124      	bne.n	8002062 <Plane_Movement+0x12a>
			ST7735_FillRectangle(*Plane_X, *Plane_Y, Plane_pixelX, Plane_pixelY, BLACK);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b298      	uxth	r0, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b299      	uxth	r1, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b29a      	uxth	r2, r3
 8002028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800202a:	b29c      	uxth	r4, r3
 800202c:	2300      	movs	r3, #0
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	4623      	mov	r3, r4
 8002032:	f7ff f977 	bl	8001324 <ST7735_FillRectangle>
			*Plane_X += (Plane_speed);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	441a      	add	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	601a      	str	r2, [r3, #0]
			ST7735_FillRectangle(*Plane_X, *Plane_Y, Plane_pixelX, Plane_pixelY, WHITE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b298      	uxth	r0, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	b299      	uxth	r1, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b29a      	uxth	r2, r3
 8002052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002054:	b29c      	uxth	r4, r3
 8002056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	4623      	mov	r3, r4
 800205e:	f7ff f961 	bl	8001324 <ST7735_FillRectangle>
		}
		int x_position = i;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	613b      	str	r3, [r7, #16]
		if (*Plane_X >= drop_X && *cargo_Dropped == 0) {
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fd46 	bl	8000afc <__aeabi_i2f>
 8002070:	4603      	mov	r3, r0
 8002072:	4619      	mov	r1, r3
 8002074:	69b8      	ldr	r0, [r7, #24]
 8002076:	f7fe ff3d 	bl	8000ef4 <__aeabi_fcmple>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d02d      	beq.n	80020dc <Plane_Movement+0x1a4>
 8002080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d129      	bne.n	80020dc <Plane_Movement+0x1a4>
			ST7735_FillRectangle(*Plane_X, *Plane_Y, Plane_pixelX, Plane_pixelY, BLACK);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	b298      	uxth	r0, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b299      	uxth	r1, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	b29a      	uxth	r2, r3
 8002098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800209a:	b29c      	uxth	r4, r3
 800209c:	2300      	movs	r3, #0
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4623      	mov	r3, r4
 80020a2:	f7ff f93f 	bl	8001324 <ST7735_FillRectangle>
			ExecutarLancamento(cargo_pixelX, cargo_pixelY, Plane_X, Plane_Y, Plane_pixelX, Plane_pixelY, Plane_speed, vento, location, load_mass, xFinal, yFinal, tempoFinal);
 80020a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020a8:	9308      	str	r3, [sp, #32]
 80020aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ac:	9307      	str	r3, [sp, #28]
 80020ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b0:	9306      	str	r3, [sp, #24]
 80020b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020b4:	9305      	str	r3, [sp, #20]
 80020b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b8:	9304      	str	r3, [sp, #16]
 80020ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020bc:	9303      	str	r3, [sp, #12]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	9302      	str	r3, [sp, #8]
 80020c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80020d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80020d2:	f000 facb 	bl	800266c <ExecutarLancamento>
			*cargo_Dropped = 1;
 80020d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 180; i += (Plane_speed)) {
 80020dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4413      	add	r3, r2
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	2bb3      	cmp	r3, #179	; 0xb3
 80020e8:	dd92      	ble.n	8002010 <Plane_Movement+0xd8>
		}
	}
}
 80020ea:	bf00      	nop
 80020ec:	372c      	adds	r7, #44	; 0x2c
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f2:	bf00      	nop
 80020f4:	411ccccd 	.word	0x411ccccd
 80020f8:	42960000 	.word	0x42960000

080020fc <AvaliarTentativa>:

int AvaliarTentativa(float xPacote, float yPacote, float xTarget, float yTarget, int raio) {
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
    float dx = xPacote - xTarget;
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f7fe fc3f 	bl	8000990 <__aeabi_fsub>
 8002112:	4603      	mov	r3, r0
 8002114:	61fb      	str	r3, [r7, #28]
    float dy = yPacote - yTarget;
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	68b8      	ldr	r0, [r7, #8]
 800211a:	f7fe fc39 	bl	8000990 <__aeabi_fsub>
 800211e:	4603      	mov	r3, r0
 8002120:	61bb      	str	r3, [r7, #24]
    float dist2 = dx*dx + dy*dy;
 8002122:	69f9      	ldr	r1, [r7, #28]
 8002124:	69f8      	ldr	r0, [r7, #28]
 8002126:	f7fe fd3d 	bl	8000ba4 <__aeabi_fmul>
 800212a:	4603      	mov	r3, r0
 800212c:	461c      	mov	r4, r3
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	69b8      	ldr	r0, [r7, #24]
 8002132:	f7fe fd37 	bl	8000ba4 <__aeabi_fmul>
 8002136:	4603      	mov	r3, r0
 8002138:	4619      	mov	r1, r3
 800213a:	4620      	mov	r0, r4
 800213c:	f7fe fc2a 	bl	8000994 <__addsf3>
 8002140:	4603      	mov	r3, r0
 8002142:	617b      	str	r3, [r7, #20]

    if (dist2 <= raio * raio) return 1;
 8002144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fcd5 	bl	8000afc <__aeabi_i2f>
 8002152:	4603      	mov	r3, r0
 8002154:	4619      	mov	r1, r3
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7fe fecc 	bl	8000ef4 <__aeabi_fcmple>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <AvaliarTentativa+0x6a>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <AvaliarTentativa+0x6c>
    else return 0;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3724      	adds	r7, #36	; 0x24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}

08002170 <RegistrarTentativa>:

void RegistrarTentativa(int stoploop,float px, float py,float raioX, float raioY,float raio, float vento,int direcao, float tempo,float tent_XFinal[], float tent_YFinal[],float tent_XTarget[], float tent_YTarget[],float tent_Raio[], float tent_Vento[],int tent_Direcao[], float tent_TempoEntrega[],bool tent_Acerto[])
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
    tent_XFinal[stoploop] = px;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002184:	4413      	add	r3, r2
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	601a      	str	r2, [r3, #0]
    tent_YFinal[stoploop] = py;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002190:	4413      	add	r3, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	601a      	str	r2, [r3, #0]
    tent_XTarget[stoploop] = raioX;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800219c:	4413      	add	r3, r2
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	601a      	str	r2, [r3, #0]
    tent_YTarget[stoploop] = raioY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021a8:	4413      	add	r3, r2
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	601a      	str	r2, [r3, #0]
    tent_Raio[stoploop] = raio;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021b4:	4413      	add	r3, r2
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	601a      	str	r2, [r3, #0]
    tent_Vento[stoploop] = vento;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021c0:	4413      	add	r3, r2
 80021c2:	6a3a      	ldr	r2, [r7, #32]
 80021c4:	601a      	str	r2, [r3, #0]
    tent_Direcao[stoploop] = direcao;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021cc:	4413      	add	r3, r2
 80021ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d0:	601a      	str	r2, [r3, #0]
    tent_TempoEntrega[stoploop] = tempo;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021d8:	4413      	add	r3, r2
 80021da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021dc:	601a      	str	r2, [r3, #0]
    tent_Acerto[stoploop] = AvaliarTentativa(px, py, raioX, raioY, raio);
 80021de:	69f8      	ldr	r0, [r7, #28]
 80021e0:	f7fe febc 	bl	8000f5c <__aeabi_f2iz>
 80021e4:	4603      	mov	r3, r0
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	68b8      	ldr	r0, [r7, #8]
 80021f0:	f7ff ff84 	bl	80020fc <AvaliarTentativa>
 80021f4:	4601      	mov	r1, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021fa:	4413      	add	r3, r2
 80021fc:	2900      	cmp	r1, #0
 80021fe:	bf14      	ite	ne
 8002200:	2201      	movne	r2, #1
 8002202:	2200      	moveq	r2, #0
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <ExibirResumoFinal>:

void ExibirResumoFinal(int totalTentativas,float tent_XFinal[],float tent_YFinal[],float tent_XTarget[],float tent_YTarget[],float tent_Raio[],float tent_Vento[],int tent_Direcao[],float tent_TempoEntrega[],bool tent_Acerto[])
{
 8002210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002214:	b0a1      	sub	sp, #132	; 0x84
 8002216:	af04      	add	r7, sp, #16
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	603b      	str	r3, [r7, #0]
    char char_string[64];
    int totalAcertos = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	66fb      	str	r3, [r7, #108]	; 0x6c
    float somaTempo = 0;
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	66bb      	str	r3, [r7, #104]	; 0x68

    for (int i = 0; i < totalTentativas; i++)
 800222a:	2300      	movs	r3, #0
 800222c:	667b      	str	r3, [r7, #100]	; 0x64
 800222e:	e017      	b.n	8002260 <ExibirResumoFinal+0x50>
    {
        totalAcertos += tent_Acerto[i];
 8002230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002232:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002236:	4413      	add	r3, r2
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800223e:	4413      	add	r3, r2
 8002240:	66fb      	str	r3, [r7, #108]	; 0x6c
        somaTempo += tent_TempoEntrega[i];
 8002242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800224a:	4413      	add	r3, r2
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002252:	f7fe fb9f 	bl	8000994 <__addsf3>
 8002256:	4603      	mov	r3, r0
 8002258:	66bb      	str	r3, [r7, #104]	; 0x68
    for (int i = 0; i < totalTentativas; i++)
 800225a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800225c:	3301      	adds	r3, #1
 800225e:	667b      	str	r3, [r7, #100]	; 0x64
 8002260:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	dbe3      	blt.n	8002230 <ExibirResumoFinal+0x20>
    }
    float mediaTempo = somaTempo / totalTentativas;
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7fe fc47 	bl	8000afc <__aeabi_i2f>
 800226e:	4603      	mov	r3, r0
 8002270:	4619      	mov	r1, r3
 8002272:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002274:	f7fe fd4a 	bl	8000d0c <__aeabi_fdiv>
 8002278:	4603      	mov	r3, r0
 800227a:	65bb      	str	r3, [r7, #88]	; 0x58
    float taxaAcerto = (totalAcertos * 100.0f) / totalTentativas;
 800227c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800227e:	f7fe fc3d 	bl	8000afc <__aeabi_i2f>
 8002282:	4603      	mov	r3, r0
 8002284:	497c      	ldr	r1, [pc, #496]	; (8002478 <ExibirResumoFinal+0x268>)
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fc8c 	bl	8000ba4 <__aeabi_fmul>
 800228c:	4603      	mov	r3, r0
 800228e:	461c      	mov	r4, r3
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7fe fc33 	bl	8000afc <__aeabi_i2f>
 8002296:	4603      	mov	r3, r0
 8002298:	4619      	mov	r1, r3
 800229a:	4620      	mov	r0, r4
 800229c:	f7fe fd36 	bl	8000d0c <__aeabi_fdiv>
 80022a0:	4603      	mov	r3, r0
 80022a2:	657b      	str	r3, [r7, #84]	; 0x54

    ST7735_FillScreen(BLACK);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff f8b1 	bl	800140c <ST7735_FillScreen>
    sprintf(char_string, "TOTAL ACERTOS: %d/%d", totalAcertos, totalTentativas);
 80022aa:	f107 0014 	add.w	r0, r7, #20
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022b2:	4972      	ldr	r1, [pc, #456]	; (800247c <ExibirResumoFinal+0x26c>)
 80022b4:	f001 febe 	bl	8004034 <siprintf>
    ST7735_WriteString(10, 10, char_string, Font_7x10, WHITE, BLACK);
 80022b8:	4b71      	ldr	r3, [pc, #452]	; (8002480 <ExibirResumoFinal+0x270>)
 80022ba:	f107 0114 	add.w	r1, r7, #20
 80022be:	2200      	movs	r2, #0
 80022c0:	9202      	str	r2, [sp, #8]
 80022c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c6:	9201      	str	r2, [sp, #4]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	9200      	str	r2, [sp, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	460a      	mov	r2, r1
 80022d0:	210a      	movs	r1, #10
 80022d2:	200a      	movs	r0, #10
 80022d4:	f7fe ffdc 	bl	8001290 <ST7735_WriteString>

    sprintf(char_string, "TAXA DE ACERTO: %.1f%%", taxaAcerto);
 80022d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80022da:	f7fe f89b 	bl	8000414 <__aeabi_f2d>
 80022de:	4603      	mov	r3, r0
 80022e0:	460c      	mov	r4, r1
 80022e2:	f107 0014 	add.w	r0, r7, #20
 80022e6:	461a      	mov	r2, r3
 80022e8:	4623      	mov	r3, r4
 80022ea:	4966      	ldr	r1, [pc, #408]	; (8002484 <ExibirResumoFinal+0x274>)
 80022ec:	f001 fea2 	bl	8004034 <siprintf>
    ST7735_WriteString(10, 25, char_string, Font_7x10, WHITE, BLACK);
 80022f0:	4b63      	ldr	r3, [pc, #396]	; (8002480 <ExibirResumoFinal+0x270>)
 80022f2:	f107 0114 	add.w	r1, r7, #20
 80022f6:	2200      	movs	r2, #0
 80022f8:	9202      	str	r2, [sp, #8]
 80022fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022fe:	9201      	str	r2, [sp, #4]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	9200      	str	r2, [sp, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	460a      	mov	r2, r1
 8002308:	2119      	movs	r1, #25
 800230a:	200a      	movs	r0, #10
 800230c:	f7fe ffc0 	bl	8001290 <ST7735_WriteString>

    sprintf(char_string, "TEMPO MEDIO: %.2fs", mediaTempo);
 8002310:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002312:	f7fe f87f 	bl	8000414 <__aeabi_f2d>
 8002316:	4603      	mov	r3, r0
 8002318:	460c      	mov	r4, r1
 800231a:	f107 0014 	add.w	r0, r7, #20
 800231e:	461a      	mov	r2, r3
 8002320:	4623      	mov	r3, r4
 8002322:	4959      	ldr	r1, [pc, #356]	; (8002488 <ExibirResumoFinal+0x278>)
 8002324:	f001 fe86 	bl	8004034 <siprintf>
    ST7735_WriteString(10, 40, char_string, Font_7x10, WHITE, BLACK);
 8002328:	4b55      	ldr	r3, [pc, #340]	; (8002480 <ExibirResumoFinal+0x270>)
 800232a:	f107 0114 	add.w	r1, r7, #20
 800232e:	2200      	movs	r2, #0
 8002330:	9202      	str	r2, [sp, #8]
 8002332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002336:	9201      	str	r2, [sp, #4]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	9200      	str	r2, [sp, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	460a      	mov	r2, r1
 8002340:	2128      	movs	r1, #40	; 0x28
 8002342:	200a      	movs	r0, #10
 8002344:	f7fe ffa4 	bl	8001290 <ST7735_WriteString>

    HAL_Delay(4000);
 8002348:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800234c:	f000 fc3a 	bl	8002bc4 <HAL_Delay>

    int current = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	663b      	str	r3, [r7, #96]	; 0x60
    int updateScreen = 1;
 8002354:	2301      	movs	r3, #1
 8002356:	65fb      	str	r3, [r7, #92]	; 0x5c

    while (1)
    {
        if (updateScreen)
 8002358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80cf 	beq.w	80024fe <ExibirResumoFinal+0x2ee>
        {
            ST7735_FillScreen(BLACK);
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff f853 	bl	800140c <ST7735_FillScreen>

            sprintf(char_string, "Tentativa %d/%d", current+1, totalTentativas);
 8002366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	f107 0014 	add.w	r0, r7, #20
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4946      	ldr	r1, [pc, #280]	; (800248c <ExibirResumoFinal+0x27c>)
 8002372:	f001 fe5f 	bl	8004034 <siprintf>
            ST7735_WriteString(10, 10, char_string, Font_7x10, WHITE, BLACK);
 8002376:	4b42      	ldr	r3, [pc, #264]	; (8002480 <ExibirResumoFinal+0x270>)
 8002378:	f107 0114 	add.w	r1, r7, #20
 800237c:	2200      	movs	r2, #0
 800237e:	9202      	str	r2, [sp, #8]
 8002380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002384:	9201      	str	r2, [sp, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	9200      	str	r2, [sp, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	460a      	mov	r2, r1
 800238e:	210a      	movs	r1, #10
 8002390:	200a      	movs	r0, #10
 8002392:	f7fe ff7d 	bl	8001290 <ST7735_WriteString>

            sprintf(char_string, "Impacto: (%.1f, %.1f)", tent_XFinal[current], tent_YFinal[current]);
 8002396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f837 	bl	8000414 <__aeabi_f2d>
 80023a6:	4605      	mov	r5, r0
 80023a8:	460e      	mov	r6, r1
 80023aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f82d 	bl	8000414 <__aeabi_f2d>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	f107 0014 	add.w	r0, r7, #20
 80023c2:	e9cd 3400 	strd	r3, r4, [sp]
 80023c6:	462a      	mov	r2, r5
 80023c8:	4633      	mov	r3, r6
 80023ca:	4931      	ldr	r1, [pc, #196]	; (8002490 <ExibirResumoFinal+0x280>)
 80023cc:	f001 fe32 	bl	8004034 <siprintf>
            ST7735_WriteString(10, 25, char_string, Font_7x10, WHITE, BLACK);
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <ExibirResumoFinal+0x270>)
 80023d2:	f107 0114 	add.w	r1, r7, #20
 80023d6:	2200      	movs	r2, #0
 80023d8:	9202      	str	r2, [sp, #8]
 80023da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023de:	9201      	str	r2, [sp, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	9200      	str	r2, [sp, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	460a      	mov	r2, r1
 80023e8:	2119      	movs	r1, #25
 80023ea:	200a      	movs	r0, #10
 80023ec:	f7fe ff50 	bl	8001290 <ST7735_WriteString>

            sprintf(char_string, "Alvo: (%.1f, %.1f) R: %.1f", tent_XTarget[current], tent_YTarget[current], tent_Raio[current]);
 80023f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f80a 	bl	8000414 <__aeabi_f2d>
 8002400:	4680      	mov	r8, r0
 8002402:	4689      	mov	r9, r1
 8002404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800240c:	4413      	add	r3, r2
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fd ffff 	bl	8000414 <__aeabi_f2d>
 8002416:	4604      	mov	r4, r0
 8002418:	460d      	mov	r5, r1
 800241a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002422:	4413      	add	r3, r2
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fd fff4 	bl	8000414 <__aeabi_f2d>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	f107 0014 	add.w	r0, r7, #20
 8002434:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002438:	e9cd 4500 	strd	r4, r5, [sp]
 800243c:	4642      	mov	r2, r8
 800243e:	464b      	mov	r3, r9
 8002440:	4914      	ldr	r1, [pc, #80]	; (8002494 <ExibirResumoFinal+0x284>)
 8002442:	f001 fdf7 	bl	8004034 <siprintf>
            ST7735_WriteString(10, 40, char_string, Font_7x10, WHITE, BLACK);
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <ExibirResumoFinal+0x270>)
 8002448:	f107 0114 	add.w	r1, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	9202      	str	r2, [sp, #8]
 8002450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002454:	9201      	str	r2, [sp, #4]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	9200      	str	r2, [sp, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	460a      	mov	r2, r1
 800245e:	2128      	movs	r1, #40	; 0x28
 8002460:	200a      	movs	r0, #10
 8002462:	f7fe ff15 	bl	8001290 <ST7735_WriteString>

            sprintf(char_string, "Acerto: %s", tent_Acerto[current] ? "SIM" : "NAO");
 8002466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002468:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <ExibirResumoFinal+0x28c>
 8002474:	4a08      	ldr	r2, [pc, #32]	; (8002498 <ExibirResumoFinal+0x288>)
 8002476:	e012      	b.n	800249e <ExibirResumoFinal+0x28e>
 8002478:	42c80000 	.word	0x42c80000
 800247c:	08004968 	.word	0x08004968
 8002480:	20000000 	.word	0x20000000
 8002484:	08004980 	.word	0x08004980
 8002488:	08004998 	.word	0x08004998
 800248c:	080049ac 	.word	0x080049ac
 8002490:	080049bc 	.word	0x080049bc
 8002494:	080049d4 	.word	0x080049d4
 8002498:	080049f0 	.word	0x080049f0
 800249c:	4a4a      	ldr	r2, [pc, #296]	; (80025c8 <ExibirResumoFinal+0x3b8>)
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	494a      	ldr	r1, [pc, #296]	; (80025cc <ExibirResumoFinal+0x3bc>)
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 fdc5 	bl	8004034 <siprintf>
            ST7735_WriteString(10, 55, char_string, Font_7x10, WHITE, BLACK);
 80024aa:	4b49      	ldr	r3, [pc, #292]	; (80025d0 <ExibirResumoFinal+0x3c0>)
 80024ac:	f107 0114 	add.w	r1, r7, #20
 80024b0:	2200      	movs	r2, #0
 80024b2:	9202      	str	r2, [sp, #8]
 80024b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b8:	9201      	str	r2, [sp, #4]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	9200      	str	r2, [sp, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	460a      	mov	r2, r1
 80024c2:	2137      	movs	r1, #55	; 0x37
 80024c4:	200a      	movs	r0, #10
 80024c6:	f7fe fee3 	bl	8001290 <ST7735_WriteString>

            sprintf(char_string, "Use PA9/PA11");
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4a41      	ldr	r2, [pc, #260]	; (80025d4 <ExibirResumoFinal+0x3c4>)
 80024d0:	461c      	mov	r4, r3
 80024d2:	4613      	mov	r3, r2
 80024d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d6:	c407      	stmia	r4!, {r0, r1, r2}
 80024d8:	7023      	strb	r3, [r4, #0]
            ST7735_WriteString(10, 70, char_string, Font_7x10, WHITE, BLACK);
 80024da:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <ExibirResumoFinal+0x3c0>)
 80024dc:	f107 0114 	add.w	r1, r7, #20
 80024e0:	2200      	movs	r2, #0
 80024e2:	9202      	str	r2, [sp, #8]
 80024e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e8:	9201      	str	r2, [sp, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	9200      	str	r2, [sp, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	460a      	mov	r2, r1
 80024f2:	2146      	movs	r1, #70	; 0x46
 80024f4:	200a      	movs	r0, #10
 80024f6:	f7fe fecb 	bl	8001290 <ST7735_WriteString>

            updateScreen = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0)
 80024fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002502:	4835      	ldr	r0, [pc, #212]	; (80025d8 <ExibirResumoFinal+0x3c8>)
 8002504:	f000 fdbe 	bl	8003084 <HAL_GPIO_ReadPin>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10c      	bne.n	8002528 <ExibirResumoFinal+0x318>
        {
            if (current < totalTentativas - 1)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3b01      	subs	r3, #1
 8002512:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002514:	429a      	cmp	r2, r3
 8002516:	da07      	bge.n	8002528 <ExibirResumoFinal+0x318>
            {
                current++;
 8002518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800251a:	3301      	adds	r3, #1
 800251c:	663b      	str	r3, [r7, #96]	; 0x60
                updateScreen = 1;
 800251e:	2301      	movs	r3, #1
 8002520:	65fb      	str	r3, [r7, #92]	; 0x5c
                HAL_Delay(250);
 8002522:	20fa      	movs	r0, #250	; 0xfa
 8002524:	f000 fb4e 	bl	8002bc4 <HAL_Delay>
            }
        }
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 8002528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800252c:	482a      	ldr	r0, [pc, #168]	; (80025d8 <ExibirResumoFinal+0x3c8>)
 800252e:	f000 fda9 	bl	8003084 <HAL_GPIO_ReadPin>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <ExibirResumoFinal+0x33e>
        {
            if (current > 0)
 8002538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800253a:	2b00      	cmp	r3, #0
 800253c:	dd07      	ble.n	800254e <ExibirResumoFinal+0x33e>
            {
                current--;
 800253e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002540:	3b01      	subs	r3, #1
 8002542:	663b      	str	r3, [r7, #96]	; 0x60
                updateScreen = 1;
 8002544:	2301      	movs	r3, #1
 8002546:	65fb      	str	r3, [r7, #92]	; 0x5c
                HAL_Delay(250);
 8002548:	20fa      	movs	r0, #250	; 0xfa
 800254a:	f000 fb3b 	bl	8002bc4 <HAL_Delay>
            }
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0) {
 800254e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002552:	4821      	ldr	r0, [pc, #132]	; (80025d8 <ExibirResumoFinal+0x3c8>)
 8002554:	f000 fd96 	bl	8003084 <HAL_GPIO_ReadPin>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f47f aefc 	bne.w	8002358 <ExibirResumoFinal+0x148>
        	HAL_Delay(250);
 8002560:	20fa      	movs	r0, #250	; 0xfa
 8002562:	f000 fb2f 	bl	8002bc4 <HAL_Delay>
        	break;
 8002566:	bf00      	nop
        }
    }

    ST7735_FillScreen(BLACK);
 8002568:	2000      	movs	r0, #0
 800256a:	f7fe ff4f 	bl	800140c <ST7735_FillScreen>
    ST7735_WriteString(10, 50, "PRESSIONE PA10 PARA", Font_7x10, WHITE, BLACK);
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <ExibirResumoFinal+0x3c0>)
 8002570:	2200      	movs	r2, #0
 8002572:	9202      	str	r2, [sp, #8]
 8002574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002578:	9201      	str	r2, [sp, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	9200      	str	r2, [sp, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a16      	ldr	r2, [pc, #88]	; (80025dc <ExibirResumoFinal+0x3cc>)
 8002582:	2132      	movs	r1, #50	; 0x32
 8002584:	200a      	movs	r0, #10
 8002586:	f7fe fe83 	bl	8001290 <ST7735_WriteString>
    ST7735_WriteString(10, 65, "ENCERRAR O PROGRAMA", Font_7x10, WHITE, BLACK);
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <ExibirResumoFinal+0x3c0>)
 800258c:	2200      	movs	r2, #0
 800258e:	9202      	str	r2, [sp, #8]
 8002590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002594:	9201      	str	r2, [sp, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	9200      	str	r2, [sp, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <ExibirResumoFinal+0x3d0>)
 800259e:	2141      	movs	r1, #65	; 0x41
 80025a0:	200a      	movs	r0, #10
 80025a2:	f7fe fe75 	bl	8001290 <ST7735_WriteString>

    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) != 0);
 80025a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025aa:	480b      	ldr	r0, [pc, #44]	; (80025d8 <ExibirResumoFinal+0x3c8>)
 80025ac:	f000 fd6a 	bl	8003084 <HAL_GPIO_ReadPin>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f7      	bne.n	80025a6 <ExibirResumoFinal+0x396>

    ST7735_FillScreen(BLACK);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe ff28 	bl	800140c <ST7735_FillScreen>
}
 80025bc:	bf00      	nop
 80025be:	3774      	adds	r7, #116	; 0x74
 80025c0:	46bd      	mov	sp, r7
 80025c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025c6:	bf00      	nop
 80025c8:	080049f4 	.word	0x080049f4
 80025cc:	080049f8 	.word	0x080049f8
 80025d0:	20000000 	.word	0x20000000
 80025d4:	08004a04 	.word	0x08004a04
 80025d8:	40010800 	.word	0x40010800
 80025dc:	08004a14 	.word	0x08004a14
 80025e0:	08004a28 	.word	0x08004a28

080025e4 <Target_Spawn>:


void Target_Spawn(int *Target_pixelX, int Target_pixelY, int *location) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
		do {
			*location = rand() % 145;
 80025f0:	f001 fca8 	bl	8003f44 <rand>
 80025f4:	4601      	mov	r1, r0
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <Target_Spawn+0x80>)
 80025f8:	fb83 2301 	smull	r2, r3, r3, r1
 80025fc:	440b      	add	r3, r1
 80025fe:	11da      	asrs	r2, r3, #7
 8002600:	17cb      	asrs	r3, r1, #31
 8002602:	1ad2      	subs	r2, r2, r3
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4413      	add	r3, r2
 800260e:	1aca      	subs	r2, r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	601a      	str	r2, [r3, #0]
		} while ((*location < 112));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b6f      	cmp	r3, #111	; 0x6f
 800261a:	dde9      	ble.n	80025f0 <Target_Spawn+0xc>

		*Target_pixelX = (rand() % 6) + 2;
 800261c:	f001 fc92 	bl	8003f44 <rand>
 8002620:	4601      	mov	r1, r0
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <Target_Spawn+0x84>)
 8002624:	fb83 3201 	smull	r3, r2, r3, r1
 8002628:	17cb      	asrs	r3, r1, #31
 800262a:	1ad2      	subs	r2, r2, r3
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	1aca      	subs	r2, r1, r3
 8002636:	3202      	adds	r2, #2
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	601a      	str	r2, [r3, #0]
		ST7735_FillRectangle(*location, 75, *Target_pixelX , Target_pixelY, WHITE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b298      	uxth	r0, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	b29a      	uxth	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	b299      	uxth	r1, r3
 800264c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	460b      	mov	r3, r1
 8002654:	214b      	movs	r1, #75	; 0x4b
 8002656:	f7fe fe65 	bl	8001324 <ST7735_FillRectangle>
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e1fc780f 	.word	0xe1fc780f
 8002668:	2aaaaaab 	.word	0x2aaaaaab

0800266c <ExecutarLancamento>:

void ExecutarLancamento(int cargo_pixelX, int cargo_pixelY, int Plane_X, int Plane_Y, int Plane_pixelX, int Plane_pixelY, int Plane_speed, int vento, int location, int c_mass, float *xFinal, float *yFinal, float *tempoFinal) {
 800266c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266e:	b093      	sub	sp, #76	; 0x4c
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
    float x = Plane_X, y = Plane_Y;
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe fa3e 	bl	8000afc <__aeabi_i2f>
 8002680:	4603      	mov	r3, r0
 8002682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002684:	6838      	ldr	r0, [r7, #0]
 8002686:	f7fe fa39 	bl	8000afc <__aeabi_i2f>
 800268a:	4603      	mov	r3, r0
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
    float g = 9.8f, t = 0;
 800268e:	4b9a      	ldr	r3, [pc, #616]	; (80028f8 <ExecutarLancamento+0x28c>)
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
    float fall = sqrtf(2.0f * (75.0f - Plane_Y) / g);
 8002698:	6838      	ldr	r0, [r7, #0]
 800269a:	f7fe fa2f 	bl	8000afc <__aeabi_i2f>
 800269e:	4603      	mov	r3, r0
 80026a0:	4619      	mov	r1, r3
 80026a2:	4896      	ldr	r0, [pc, #600]	; (80028fc <ExecutarLancamento+0x290>)
 80026a4:	f7fe f974 	bl	8000990 <__aeabi_fsub>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4619      	mov	r1, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe f971 	bl	8000994 <__addsf3>
 80026b2:	4603      	mov	r3, r0
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fb28 	bl	8000d0c <__aeabi_fdiv>
 80026bc:	4603      	mov	r3, r0
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 f814 	bl	80046ec <sqrtf>
 80026c4:	6238      	str	r0, [r7, #32]
    float drop_X = (float)location - ((Plane_speed + (float)vento * (1.0f / (float)c_mass)) * fall);
 80026c6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80026c8:	f7fe fa18 	bl	8000afc <__aeabi_i2f>
 80026cc:	4604      	mov	r4, r0
 80026ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80026d0:	f7fe fa14 	bl	8000afc <__aeabi_i2f>
 80026d4:	4605      	mov	r5, r0
 80026d6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80026d8:	f7fe fa10 	bl	8000afc <__aeabi_i2f>
 80026dc:	4606      	mov	r6, r0
 80026de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80026e0:	f7fe fa0c 	bl	8000afc <__aeabi_i2f>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4619      	mov	r1, r3
 80026e8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80026ec:	f7fe fb0e 	bl	8000d0c <__aeabi_fdiv>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4619      	mov	r1, r3
 80026f4:	4630      	mov	r0, r6
 80026f6:	f7fe fa55 	bl	8000ba4 <__aeabi_fmul>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4619      	mov	r1, r3
 80026fe:	4628      	mov	r0, r5
 8002700:	f7fe f948 	bl	8000994 <__addsf3>
 8002704:	4603      	mov	r3, r0
 8002706:	6a39      	ldr	r1, [r7, #32]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fa4b 	bl	8000ba4 <__aeabi_fmul>
 800270e:	4603      	mov	r3, r0
 8002710:	4619      	mov	r1, r3
 8002712:	4620      	mov	r0, r4
 8002714:	f7fe f93c 	bl	8000990 <__aeabi_fsub>
 8002718:	4603      	mov	r3, r0
 800271a:	61fb      	str	r3, [r7, #28]
    float vx = Plane_speed + (float)vento * (1.0f / (float)c_mass);
 800271c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800271e:	f7fe f9ed 	bl	8000afc <__aeabi_i2f>
 8002722:	4604      	mov	r4, r0
 8002724:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002726:	f7fe f9e9 	bl	8000afc <__aeabi_i2f>
 800272a:	4605      	mov	r5, r0
 800272c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800272e:	f7fe f9e5 	bl	8000afc <__aeabi_i2f>
 8002732:	4603      	mov	r3, r0
 8002734:	4619      	mov	r1, r3
 8002736:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800273a:	f7fe fae7 	bl	8000d0c <__aeabi_fdiv>
 800273e:	4603      	mov	r3, r0
 8002740:	4619      	mov	r1, r3
 8002742:	4628      	mov	r0, r5
 8002744:	f7fe fa2e 	bl	8000ba4 <__aeabi_fmul>
 8002748:	4603      	mov	r3, r0
 800274a:	4619      	mov	r1, r3
 800274c:	4620      	mov	r0, r4
 800274e:	f7fe f921 	bl	8000994 <__addsf3>
 8002752:	4603      	mov	r3, r0
 8002754:	61bb      	str	r3, [r7, #24]
    float vy = 0.0f;
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
    float time_step = 0.1f;
 800275c:	4b68      	ldr	r3, [pc, #416]	; (8002900 <ExecutarLancamento+0x294>)
 800275e:	617b      	str	r3, [r7, #20]
    int prev_x = x, prev_y = y;
 8002760:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002762:	f7fe fbfb 	bl	8000f5c <__aeabi_f2iz>
 8002766:	4603      	mov	r3, r0
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800276c:	f7fe fbf6 	bl	8000f5c <__aeabi_f2iz>
 8002770:	4603      	mov	r3, r0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28

    while (Plane_X < (int)drop_X || y < 75) {
 8002774:	e094      	b.n	80028a0 <ExecutarLancamento+0x234>
    		ST7735_FillRectangle(Plane_X, Plane_Y, Plane_pixelX, Plane_pixelY, BLACK);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	b298      	uxth	r0, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b299      	uxth	r1, r3
 800277e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002780:	b29a      	uxth	r2, r3
 8002782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002784:	b29c      	uxth	r4, r3
 8002786:	2300      	movs	r3, #0
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4623      	mov	r3, r4
 800278c:	f7fe fdca 	bl	8001324 <ST7735_FillRectangle>
    		Plane_X += Plane_speed;
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002794:	4413      	add	r3, r2
 8002796:	607b      	str	r3, [r7, #4]
            ST7735_FillRectangle(Plane_X, Plane_Y, Plane_pixelX, Plane_pixelY, WHITE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	b298      	uxth	r0, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b299      	uxth	r1, r3
 80027a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a6:	b29c      	uxth	r4, r3
 80027a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	4623      	mov	r3, r4
 80027b0:	f7fe fdb8 	bl	8001324 <ST7735_FillRectangle>

            ST7735_FillRectangle(prev_x, prev_y, cargo_pixelX, cargo_pixelY, BLACK);
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	b298      	uxth	r0, r3
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	b299      	uxth	r1, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	b29c      	uxth	r4, r3
 80027c4:	2300      	movs	r3, #0
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	4623      	mov	r3, r4
 80027ca:	f7fe fdab 	bl	8001324 <ST7735_FillRectangle>
            t += time_step;
 80027ce:	6979      	ldr	r1, [r7, #20]
 80027d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027d2:	f7fe f8df 	bl	8000994 <__addsf3>
 80027d6:	4603      	mov	r3, r0
 80027d8:	637b      	str	r3, [r7, #52]	; 0x34
            x += vx * time_step;
 80027da:	6979      	ldr	r1, [r7, #20]
 80027dc:	69b8      	ldr	r0, [r7, #24]
 80027de:	f7fe f9e1 	bl	8000ba4 <__aeabi_fmul>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4619      	mov	r1, r3
 80027e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027e8:	f7fe f8d4 	bl	8000994 <__addsf3>
 80027ec:	4603      	mov	r3, r0
 80027ee:	63fb      	str	r3, [r7, #60]	; 0x3c
            y = Plane_Y + vy * t + 0.5f * g * t * t;
 80027f0:	6838      	ldr	r0, [r7, #0]
 80027f2:	f7fe f983 	bl	8000afc <__aeabi_i2f>
 80027f6:	4604      	mov	r4, r0
 80027f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027fc:	f7fe f9d2 	bl	8000ba4 <__aeabi_fmul>
 8002800:	4603      	mov	r3, r0
 8002802:	4619      	mov	r1, r3
 8002804:	4620      	mov	r0, r4
 8002806:	f7fe f8c5 	bl	8000994 <__addsf3>
 800280a:	4603      	mov	r3, r0
 800280c:	461c      	mov	r4, r3
 800280e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002814:	f7fe f9c6 	bl	8000ba4 <__aeabi_fmul>
 8002818:	4603      	mov	r3, r0
 800281a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe f9c1 	bl	8000ba4 <__aeabi_fmul>
 8002822:	4603      	mov	r3, r0
 8002824:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe f9bc 	bl	8000ba4 <__aeabi_fmul>
 800282c:	4603      	mov	r3, r0
 800282e:	4619      	mov	r1, r3
 8002830:	4620      	mov	r0, r4
 8002832:	f7fe f8af 	bl	8000994 <__addsf3>
 8002836:	4603      	mov	r3, r0
 8002838:	63bb      	str	r3, [r7, #56]	; 0x38
            vy += g * time_step;
 800283a:	6979      	ldr	r1, [r7, #20]
 800283c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800283e:	f7fe f9b1 	bl	8000ba4 <__aeabi_fmul>
 8002842:	4603      	mov	r3, r0
 8002844:	4619      	mov	r1, r3
 8002846:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002848:	f7fe f8a4 	bl	8000994 <__addsf3>
 800284c:	4603      	mov	r3, r0
 800284e:	633b      	str	r3, [r7, #48]	; 0x30

            if (y > 75.0f) y = 75.0f;
 8002850:	492a      	ldr	r1, [pc, #168]	; (80028fc <ExecutarLancamento+0x290>)
 8002852:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002854:	f7fe fb62 	bl	8000f1c <__aeabi_fcmpgt>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <ExecutarLancamento+0x1f6>
 800285e:	4b27      	ldr	r3, [pc, #156]	; (80028fc <ExecutarLancamento+0x290>)
 8002860:	63bb      	str	r3, [r7, #56]	; 0x38
            ST7735_FillRectangle((int)x, (int)y, cargo_pixelX, cargo_pixelY, RED);
 8002862:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002864:	f7fe fb7a 	bl	8000f5c <__aeabi_f2iz>
 8002868:	4603      	mov	r3, r0
 800286a:	b29c      	uxth	r4, r3
 800286c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800286e:	f7fe fb75 	bl	8000f5c <__aeabi_f2iz>
 8002872:	4603      	mov	r3, r0
 8002874:	b299      	uxth	r1, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	b29a      	uxth	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	b298      	uxth	r0, r3
 800287e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	4603      	mov	r3, r0
 8002886:	4620      	mov	r0, r4
 8002888:	f7fe fd4c 	bl	8001324 <ST7735_FillRectangle>

            prev_x = (int)x;
 800288c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800288e:	f7fe fb65 	bl	8000f5c <__aeabi_f2iz>
 8002892:	4603      	mov	r3, r0
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
            prev_y = (int)y;
 8002896:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002898:	f7fe fb60 	bl	8000f5c <__aeabi_f2iz>
 800289c:	4603      	mov	r3, r0
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (Plane_X < (int)drop_X || y < 75) {
 80028a0:	69f8      	ldr	r0, [r7, #28]
 80028a2:	f7fe fb5b 	bl	8000f5c <__aeabi_f2iz>
 80028a6:	4602      	mov	r2, r0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4293      	cmp	r3, r2
 80028ac:	f6ff af63 	blt.w	8002776 <ExecutarLancamento+0x10a>
 80028b0:	4912      	ldr	r1, [pc, #72]	; (80028fc <ExecutarLancamento+0x290>)
 80028b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028b4:	f7fe fb14 	bl	8000ee0 <__aeabi_fcmplt>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f47f af5b 	bne.w	8002776 <ExecutarLancamento+0x10a>

    }

    ST7735_FillRectangle(prev_x, prev_y, cargo_pixelX, cargo_pixelY, RED);
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	b298      	uxth	r0, r3
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	b299      	uxth	r1, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	b29c      	uxth	r4, r3
 80028d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	4623      	mov	r3, r4
 80028d8:	f7fe fd24 	bl	8001324 <ST7735_FillRectangle>

    *xFinal = x;
 80028dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028e0:	601a      	str	r2, [r3, #0]
    *yFinal = y;
 80028e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028e6:	601a      	str	r2, [r3, #0]
    *tempoFinal = t;
 80028e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ec:	601a      	str	r2, [r3, #0]

}
 80028ee:	bf00      	nop
 80028f0:	3744      	adds	r7, #68	; 0x44
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	411ccccd 	.word	0x411ccccd
 80028fc:	42960000 	.word	0x42960000
 8002900:	3dcccccd 	.word	0x3dcccccd

08002904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002908:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800290a:	e7fe      	b.n	800290a <Error_Handler+0x6>

0800290c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_MspInit+0x5c>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_MspInit+0x5c>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6193      	str	r3, [r2, #24]
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_MspInit+0x5c>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_MspInit+0x5c>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <HAL_MspInit+0x5c>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	61d3      	str	r3, [r2, #28]
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_MspInit+0x5c>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_MspInit+0x60>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <HAL_MspInit+0x60>)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40021000 	.word	0x40021000
 800296c:	40010000 	.word	0x40010000

08002970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <HAL_SPI_MspInit+0x70>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d123      	bne.n	80029d8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_SPI_MspInit+0x74>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <HAL_SPI_MspInit+0x74>)
 8002996:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_SPI_MspInit+0x74>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_SPI_MspInit+0x74>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <HAL_SPI_MspInit+0x74>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	6193      	str	r3, [r2, #24]
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_SPI_MspInit+0x74>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80029c0:	23a0      	movs	r3, #160	; 0xa0
 80029c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	4619      	mov	r1, r3
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <HAL_SPI_MspInit+0x78>)
 80029d4:	f000 f9fc 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029d8:	bf00      	nop
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40013000 	.word	0x40013000
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40010800 	.word	0x40010800

080029ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <NMI_Handler+0x4>

080029f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f6:	e7fe      	b.n	80029f6 <HardFault_Handler+0x4>

080029f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <MemManage_Handler+0x4>

080029fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <BusFault_Handler+0x4>

08002a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <UsageFault_Handler+0x4>

08002a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a32:	f000 f8ab 	bl	8002b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a44:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <_sbrk+0x5c>)
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <_sbrk+0x60>)
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <_sbrk+0x64>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <_sbrk+0x64>)
 8002a5a:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <_sbrk+0x68>)
 8002a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <_sbrk+0x64>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d207      	bcs.n	8002a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a6c:	f001 f98a 	bl	8003d84 <__errno>
 8002a70:	4602      	mov	r2, r0
 8002a72:	230c      	movs	r3, #12
 8002a74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	e009      	b.n	8002a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <_sbrk+0x64>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <_sbrk+0x64>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <_sbrk+0x64>)
 8002a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20005000 	.word	0x20005000
 8002a9c:	00000400 	.word	0x00000400
 8002aa0:	200000a0 	.word	0x200000a0
 8002aa4:	20000110 	.word	0x20000110

08002aa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ab4:	480c      	ldr	r0, [pc, #48]	; (8002ae8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ab6:	490d      	ldr	r1, [pc, #52]	; (8002aec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002abc:	e002      	b.n	8002ac4 <LoopCopyDataInit>

08002abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac2:	3304      	adds	r3, #4

08002ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac8:	d3f9      	bcc.n	8002abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aca:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002acc:	4c0a      	ldr	r4, [pc, #40]	; (8002af8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad0:	e001      	b.n	8002ad6 <LoopFillZerobss>

08002ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad4:	3204      	adds	r2, #4

08002ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad8:	d3fb      	bcc.n	8002ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ada:	f7ff ffe5 	bl	8002aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ade:	f001 f957 	bl	8003d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ae2:	f7fe fca5 	bl	8001430 <main>
  bx lr
 8002ae6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aec:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002af0:	08005fe4 	.word	0x08005fe4
  ldr r2, =_sbss
 8002af4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002af8:	2000010c 	.word	0x2000010c

08002afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002afc:	e7fe      	b.n	8002afc <ADC1_2_IRQHandler>
	...

08002b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_Init+0x28>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_Init+0x28>)
 8002b0a:	f043 0310 	orr.w	r3, r3, #16
 8002b0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b10:	2003      	movs	r0, #3
 8002b12:	f000 f929 	bl	8002d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f000 f808 	bl	8002b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b1c:	f7ff fef6 	bl	800290c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40022000 	.word	0x40022000

08002b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_InitTick+0x54>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_InitTick+0x58>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f933 	bl	8002db6 <HAL_SYSTICK_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00e      	b.n	8002b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b0f      	cmp	r3, #15
 8002b5e:	d80a      	bhi.n	8002b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b60:	2200      	movs	r2, #0
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f000 f909 	bl	8002d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b6c:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <HAL_InitTick+0x5c>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e000      	b.n	8002b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000010 	.word	0x20000010
 8002b84:	20000018 	.word	0x20000018
 8002b88:	20000014 	.word	0x20000014

08002b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_IncTick+0x1c>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_IncTick+0x20>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	4a03      	ldr	r2, [pc, #12]	; (8002bac <HAL_IncTick+0x20>)
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	20000018 	.word	0x20000018
 8002bac:	20000104 	.word	0x20000104

08002bb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb4:	4b02      	ldr	r3, [pc, #8]	; (8002bc0 <HAL_GetTick+0x10>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	20000104 	.word	0x20000104

08002bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bcc:	f7ff fff0 	bl	8002bb0 <HAL_GetTick>
 8002bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d005      	beq.n	8002bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_Delay+0x40>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bea:	bf00      	nop
 8002bec:	f7ff ffe0 	bl	8002bb0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d8f7      	bhi.n	8002bec <HAL_Delay+0x28>
  {
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000018 	.word	0x20000018

08002c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c24:	4013      	ands	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c3a:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	60d3      	str	r3, [r2, #12]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <__NVIC_GetPriorityGrouping+0x18>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	f003 0307 	and.w	r3, r3, #7
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db0a      	blt.n	8002c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	490c      	ldr	r1, [pc, #48]	; (8002cb8 <__NVIC_SetPriority+0x4c>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c94:	e00a      	b.n	8002cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4908      	ldr	r1, [pc, #32]	; (8002cbc <__NVIC_SetPriority+0x50>)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	0112      	lsls	r2, r2, #4
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	440b      	add	r3, r1
 8002caa:	761a      	strb	r2, [r3, #24]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000e100 	.word	0xe000e100
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f1c3 0307 	rsb	r3, r3, #7
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	bf28      	it	cs
 8002cde:	2304      	movcs	r3, #4
 8002ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d902      	bls.n	8002cf0 <NVIC_EncodePriority+0x30>
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3b03      	subs	r3, #3
 8002cee:	e000      	b.n	8002cf2 <NVIC_EncodePriority+0x32>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	401a      	ands	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	4313      	orrs	r3, r2
         );
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d34:	d301      	bcc.n	8002d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00f      	b.n	8002d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <SysTick_Config+0x40>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d42:	210f      	movs	r1, #15
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f7ff ff90 	bl	8002c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <SysTick_Config+0x40>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d52:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <SysTick_Config+0x40>)
 8002d54:	2207      	movs	r2, #7
 8002d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	e000e010 	.word	0xe000e010

08002d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff49 	bl	8002c08 <__NVIC_SetPriorityGrouping>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d90:	f7ff ff5e 	bl	8002c50 <__NVIC_GetPriorityGrouping>
 8002d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	6978      	ldr	r0, [r7, #20]
 8002d9c:	f7ff ff90 	bl	8002cc0 <NVIC_EncodePriority>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff5f 	bl	8002c6c <__NVIC_SetPriority>
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ffb0 	bl	8002d24 <SysTick_Config>
 8002dc4:	4603      	mov	r3, r0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b08b      	sub	sp, #44	; 0x2c
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de2:	e127      	b.n	8003034 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002de4:	2201      	movs	r2, #1
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f040 8116 	bne.w	800302e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b12      	cmp	r3, #18
 8002e08:	d034      	beq.n	8002e74 <HAL_GPIO_Init+0xa4>
 8002e0a:	2b12      	cmp	r3, #18
 8002e0c:	d80d      	bhi.n	8002e2a <HAL_GPIO_Init+0x5a>
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d02b      	beq.n	8002e6a <HAL_GPIO_Init+0x9a>
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d804      	bhi.n	8002e20 <HAL_GPIO_Init+0x50>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d031      	beq.n	8002e7e <HAL_GPIO_Init+0xae>
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d01c      	beq.n	8002e58 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e1e:	e048      	b.n	8002eb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d043      	beq.n	8002eac <HAL_GPIO_Init+0xdc>
 8002e24:	2b11      	cmp	r3, #17
 8002e26:	d01b      	beq.n	8002e60 <HAL_GPIO_Init+0x90>
          break;
 8002e28:	e043      	b.n	8002eb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e2a:	4a89      	ldr	r2, [pc, #548]	; (8003050 <HAL_GPIO_Init+0x280>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d026      	beq.n	8002e7e <HAL_GPIO_Init+0xae>
 8002e30:	4a87      	ldr	r2, [pc, #540]	; (8003050 <HAL_GPIO_Init+0x280>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d806      	bhi.n	8002e44 <HAL_GPIO_Init+0x74>
 8002e36:	4a87      	ldr	r2, [pc, #540]	; (8003054 <HAL_GPIO_Init+0x284>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d020      	beq.n	8002e7e <HAL_GPIO_Init+0xae>
 8002e3c:	4a86      	ldr	r2, [pc, #536]	; (8003058 <HAL_GPIO_Init+0x288>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01d      	beq.n	8002e7e <HAL_GPIO_Init+0xae>
          break;
 8002e42:	e036      	b.n	8002eb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e44:	4a85      	ldr	r2, [pc, #532]	; (800305c <HAL_GPIO_Init+0x28c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_Init+0xae>
 8002e4a:	4a85      	ldr	r2, [pc, #532]	; (8003060 <HAL_GPIO_Init+0x290>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d016      	beq.n	8002e7e <HAL_GPIO_Init+0xae>
 8002e50:	4a84      	ldr	r2, [pc, #528]	; (8003064 <HAL_GPIO_Init+0x294>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0xae>
          break;
 8002e56:	e02c      	b.n	8002eb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	623b      	str	r3, [r7, #32]
          break;
 8002e5e:	e028      	b.n	8002eb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	3304      	adds	r3, #4
 8002e66:	623b      	str	r3, [r7, #32]
          break;
 8002e68:	e023      	b.n	8002eb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	3308      	adds	r3, #8
 8002e70:	623b      	str	r3, [r7, #32]
          break;
 8002e72:	e01e      	b.n	8002eb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	623b      	str	r3, [r7, #32]
          break;
 8002e7c:	e019      	b.n	8002eb2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e86:	2304      	movs	r3, #4
 8002e88:	623b      	str	r3, [r7, #32]
          break;
 8002e8a:	e012      	b.n	8002eb2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e94:	2308      	movs	r3, #8
 8002e96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	611a      	str	r2, [r3, #16]
          break;
 8002e9e:	e008      	b.n	8002eb2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	615a      	str	r2, [r3, #20]
          break;
 8002eaa:	e002      	b.n	8002eb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eac:	2300      	movs	r3, #0
 8002eae:	623b      	str	r3, [r7, #32]
          break;
 8002eb0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2bff      	cmp	r3, #255	; 0xff
 8002eb6:	d801      	bhi.n	8002ebc <HAL_GPIO_Init+0xec>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	e001      	b.n	8002ec0 <HAL_GPIO_Init+0xf0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2bff      	cmp	r3, #255	; 0xff
 8002ec6:	d802      	bhi.n	8002ece <HAL_GPIO_Init+0xfe>
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_Init+0x104>
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	3b08      	subs	r3, #8
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	210f      	movs	r1, #15
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	6a39      	ldr	r1, [r7, #32]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8096 	beq.w	800302e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f02:	4b59      	ldr	r3, [pc, #356]	; (8003068 <HAL_GPIO_Init+0x298>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	4a58      	ldr	r2, [pc, #352]	; (8003068 <HAL_GPIO_Init+0x298>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6193      	str	r3, [r2, #24]
 8002f0e:	4b56      	ldr	r3, [pc, #344]	; (8003068 <HAL_GPIO_Init+0x298>)
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f1a:	4a54      	ldr	r2, [pc, #336]	; (800306c <HAL_GPIO_Init+0x29c>)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f26:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	220f      	movs	r2, #15
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4b      	ldr	r2, [pc, #300]	; (8003070 <HAL_GPIO_Init+0x2a0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_GPIO_Init+0x19e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4a      	ldr	r2, [pc, #296]	; (8003074 <HAL_GPIO_Init+0x2a4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00d      	beq.n	8002f6a <HAL_GPIO_Init+0x19a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a49      	ldr	r2, [pc, #292]	; (8003078 <HAL_GPIO_Init+0x2a8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x196>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a48      	ldr	r2, [pc, #288]	; (800307c <HAL_GPIO_Init+0x2ac>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_GPIO_Init+0x192>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e006      	b.n	8002f70 <HAL_GPIO_Init+0x1a0>
 8002f62:	2304      	movs	r3, #4
 8002f64:	e004      	b.n	8002f70 <HAL_GPIO_Init+0x1a0>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e002      	b.n	8002f70 <HAL_GPIO_Init+0x1a0>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_GPIO_Init+0x1a0>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f72:	f002 0203 	and.w	r2, r2, #3
 8002f76:	0092      	lsls	r2, r2, #2
 8002f78:	4093      	lsls	r3, r2
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f80:	493a      	ldr	r1, [pc, #232]	; (800306c <HAL_GPIO_Init+0x29c>)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	3302      	adds	r3, #2
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d006      	beq.n	8002fa8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f9a:	4b39      	ldr	r3, [pc, #228]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4938      	ldr	r1, [pc, #224]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
 8002fa6:	e006      	b.n	8002fb6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	4933      	ldr	r1, [pc, #204]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	492e      	ldr	r1, [pc, #184]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
 8002fce:	e006      	b.n	8002fde <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	4929      	ldr	r1, [pc, #164]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fea:	4b25      	ldr	r3, [pc, #148]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	4924      	ldr	r1, [pc, #144]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
 8002ff6:	e006      	b.n	8003006 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ff8:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	491f      	ldr	r1, [pc, #124]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8003002:	4013      	ands	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003012:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	491a      	ldr	r1, [pc, #104]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	60cb      	str	r3, [r1, #12]
 800301e:	e006      	b.n	800302e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	43db      	mvns	r3, r3
 8003028:	4915      	ldr	r1, [pc, #84]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 800302a:	4013      	ands	r3, r2
 800302c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	3301      	adds	r3, #1
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	fa22 f303 	lsr.w	r3, r2, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	f47f aed0 	bne.w	8002de4 <HAL_GPIO_Init+0x14>
  }
}
 8003044:	bf00      	nop
 8003046:	372c      	adds	r7, #44	; 0x2c
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	10210000 	.word	0x10210000
 8003054:	10110000 	.word	0x10110000
 8003058:	10120000 	.word	0x10120000
 800305c:	10310000 	.word	0x10310000
 8003060:	10320000 	.word	0x10320000
 8003064:	10220000 	.word	0x10220000
 8003068:	40021000 	.word	0x40021000
 800306c:	40010000 	.word	0x40010000
 8003070:	40010800 	.word	0x40010800
 8003074:	40010c00 	.word	0x40010c00
 8003078:	40011000 	.word	0x40011000
 800307c:	40011400 	.word	0x40011400
 8003080:	40010400 	.word	0x40010400

08003084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	887b      	ldrh	r3, [r7, #2]
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	e001      	b.n	80030a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	807b      	strh	r3, [r7, #2]
 80030be:	4613      	mov	r3, r2
 80030c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030c2:	787b      	ldrb	r3, [r7, #1]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030c8:	887a      	ldrh	r2, [r7, #2]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030ce:	e003      	b.n	80030d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030d0:	887b      	ldrh	r3, [r7, #2]
 80030d2:	041a      	lsls	r2, r3, #16
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	611a      	str	r2, [r3, #16]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e26c      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8087 	beq.w	8003212 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003104:	4b92      	ldr	r3, [pc, #584]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b04      	cmp	r3, #4
 800310e:	d00c      	beq.n	800312a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003110:	4b8f      	ldr	r3, [pc, #572]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b08      	cmp	r3, #8
 800311a:	d112      	bne.n	8003142 <HAL_RCC_OscConfig+0x5e>
 800311c:	4b8c      	ldr	r3, [pc, #560]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003128:	d10b      	bne.n	8003142 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312a:	4b89      	ldr	r3, [pc, #548]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d06c      	beq.n	8003210 <HAL_RCC_OscConfig+0x12c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d168      	bne.n	8003210 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e246      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314a:	d106      	bne.n	800315a <HAL_RCC_OscConfig+0x76>
 800314c:	4b80      	ldr	r3, [pc, #512]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a7f      	ldr	r2, [pc, #508]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	e02e      	b.n	80031b8 <HAL_RCC_OscConfig+0xd4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x98>
 8003162:	4b7b      	ldr	r3, [pc, #492]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a7a      	ldr	r2, [pc, #488]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b78      	ldr	r3, [pc, #480]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a77      	ldr	r2, [pc, #476]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e01d      	b.n	80031b8 <HAL_RCC_OscConfig+0xd4>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0xbc>
 8003186:	4b72      	ldr	r3, [pc, #456]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a71      	ldr	r2, [pc, #452]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b6f      	ldr	r3, [pc, #444]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6e      	ldr	r2, [pc, #440]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_OscConfig+0xd4>
 80031a0:	4b6b      	ldr	r3, [pc, #428]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6a      	ldr	r2, [pc, #424]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b68      	ldr	r3, [pc, #416]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a67      	ldr	r2, [pc, #412]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7ff fcf6 	bl	8002bb0 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7ff fcf2 	bl	8002bb0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1fa      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b5d      	ldr	r3, [pc, #372]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0xe4>
 80031e6:	e014      	b.n	8003212 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7ff fce2 	bl	8002bb0 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7ff fcde 	bl	8002bb0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e1e6      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	4b53      	ldr	r3, [pc, #332]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x10c>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d063      	beq.n	80032e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800321e:	4b4c      	ldr	r3, [pc, #304]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800322a:	4b49      	ldr	r3, [pc, #292]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b08      	cmp	r3, #8
 8003234:	d11c      	bne.n	8003270 <HAL_RCC_OscConfig+0x18c>
 8003236:	4b46      	ldr	r3, [pc, #280]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d116      	bne.n	8003270 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	4b43      	ldr	r3, [pc, #268]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_RCC_OscConfig+0x176>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e1ba      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325a:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4939      	ldr	r1, [pc, #228]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	e03a      	b.n	80032e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d020      	beq.n	80032ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7ff fc97 	bl	8002bb0 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003286:	f7ff fc93 	bl	8002bb0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e19b      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4927      	ldr	r1, [pc, #156]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]
 80032b8:	e015      	b.n	80032e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ba:	4b26      	ldr	r3, [pc, #152]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7ff fc76 	bl	8002bb0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c8:	f7ff fc72 	bl	8002bb0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e17a      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d03a      	beq.n	8003368 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d019      	beq.n	800332e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003300:	f7ff fc56 	bl	8002bb0 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003308:	f7ff fc52 	bl	8002bb0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e15a      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <HAL_RCC_OscConfig+0x26c>)
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003326:	2001      	movs	r0, #1
 8003328:	f000 faa8 	bl	800387c <RCC_Delay>
 800332c:	e01c      	b.n	8003368 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003334:	f7ff fc3c 	bl	8002bb0 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333a:	e00f      	b.n	800335c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333c:	f7ff fc38 	bl	8002bb0 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d908      	bls.n	800335c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e140      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	42420000 	.word	0x42420000
 8003358:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	4b9e      	ldr	r3, [pc, #632]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e9      	bne.n	800333c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80a6 	beq.w	80034c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b97      	ldr	r3, [pc, #604]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10d      	bne.n	80033a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	4b94      	ldr	r3, [pc, #592]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4a93      	ldr	r2, [pc, #588]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 800338c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003390:	61d3      	str	r3, [r2, #28]
 8003392:	4b91      	ldr	r3, [pc, #580]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a2:	4b8e      	ldr	r3, [pc, #568]	; (80035dc <HAL_RCC_OscConfig+0x4f8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d118      	bne.n	80033e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ae:	4b8b      	ldr	r3, [pc, #556]	; (80035dc <HAL_RCC_OscConfig+0x4f8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a8a      	ldr	r2, [pc, #552]	; (80035dc <HAL_RCC_OscConfig+0x4f8>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ba:	f7ff fbf9 	bl	8002bb0 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c2:	f7ff fbf5 	bl	8002bb0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b64      	cmp	r3, #100	; 0x64
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0fd      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	4b81      	ldr	r3, [pc, #516]	; (80035dc <HAL_RCC_OscConfig+0x4f8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x312>
 80033e8:	4b7b      	ldr	r3, [pc, #492]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4a7a      	ldr	r2, [pc, #488]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6213      	str	r3, [r2, #32]
 80033f4:	e02d      	b.n	8003452 <HAL_RCC_OscConfig+0x36e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x334>
 80033fe:	4b76      	ldr	r3, [pc, #472]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a75      	ldr	r2, [pc, #468]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	4b73      	ldr	r3, [pc, #460]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a72      	ldr	r2, [pc, #456]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	6213      	str	r3, [r2, #32]
 8003416:	e01c      	b.n	8003452 <HAL_RCC_OscConfig+0x36e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d10c      	bne.n	800343a <HAL_RCC_OscConfig+0x356>
 8003420:	4b6d      	ldr	r3, [pc, #436]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4a6c      	ldr	r2, [pc, #432]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	6213      	str	r3, [r2, #32]
 800342c:	4b6a      	ldr	r3, [pc, #424]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4a69      	ldr	r2, [pc, #420]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6213      	str	r3, [r2, #32]
 8003438:	e00b      	b.n	8003452 <HAL_RCC_OscConfig+0x36e>
 800343a:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4a66      	ldr	r2, [pc, #408]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	6213      	str	r3, [r2, #32]
 8003446:	4b64      	ldr	r3, [pc, #400]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4a63      	ldr	r2, [pc, #396]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d015      	beq.n	8003486 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345a:	f7ff fba9 	bl	8002bb0 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	e00a      	b.n	8003478 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7ff fba5 	bl	8002bb0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0ab      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	4b57      	ldr	r3, [pc, #348]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ee      	beq.n	8003462 <HAL_RCC_OscConfig+0x37e>
 8003484:	e014      	b.n	80034b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003486:	f7ff fb93 	bl	8002bb0 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7ff fb8f 	bl	8002bb0 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e095      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a4:	4b4c      	ldr	r3, [pc, #304]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ee      	bne.n	800348e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b6:	4b48      	ldr	r3, [pc, #288]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4a47      	ldr	r2, [pc, #284]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8081 	beq.w	80035ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034cc:	4b42      	ldr	r3, [pc, #264]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d061      	beq.n	800359c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d146      	bne.n	800356e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <HAL_RCC_OscConfig+0x4fc>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7ff fb63 	bl	8002bb0 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ee:	f7ff fb5f 	bl	8002bb0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e067      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003500:	4b35      	ldr	r3, [pc, #212]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d108      	bne.n	8003528 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003516:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	492d      	ldr	r1, [pc, #180]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a19      	ldr	r1, [r3, #32]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	430b      	orrs	r3, r1
 800353a:	4927      	ldr	r1, [pc, #156]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <HAL_RCC_OscConfig+0x4fc>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7ff fb33 	bl	8002bb0 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354e:	f7ff fb2f 	bl	8002bb0 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e037      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x46a>
 800356c:	e02f      	b.n	80035ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <HAL_RCC_OscConfig+0x4fc>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7ff fb1c 	bl	8002bb0 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357c:	f7ff fb18 	bl	8002bb0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e020      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x498>
 800359a:	e018      	b.n	80035ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e013      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40007000 	.word	0x40007000
 80035e0:	42420060 	.word	0x42420060

080035e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0d0      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f8:	4b6a      	ldr	r3, [pc, #424]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d910      	bls.n	8003628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b67      	ldr	r3, [pc, #412]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 0207 	bic.w	r2, r3, #7
 800360e:	4965      	ldr	r1, [pc, #404]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0b8      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800364a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003658:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a52      	ldr	r2, [pc, #328]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003662:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003664:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	494d      	ldr	r1, [pc, #308]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d040      	beq.n	8003704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d115      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e07f      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e073      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b2:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06b      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c2:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f023 0203 	bic.w	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4936      	ldr	r1, [pc, #216]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d4:	f7ff fa6c 	bl	8002bb0 <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036dc:	f7ff fa68 	bl	8002bb0 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e053      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 020c 	and.w	r2, r3, #12
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	429a      	cmp	r2, r3
 8003702:	d1eb      	bne.n	80036dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003704:	4b27      	ldr	r3, [pc, #156]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d210      	bcs.n	8003734 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 0207 	bic.w	r2, r3, #7
 800371a:	4922      	ldr	r1, [pc, #136]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e032      	b.n	800379a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4916      	ldr	r1, [pc, #88]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	490e      	ldr	r1, [pc, #56]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003772:	f000 f821 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8003776:	4601      	mov	r1, r0
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003784:	5cd3      	ldrb	r3, [r2, r3]
 8003786:	fa21 f303 	lsr.w	r3, r1, r3
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1cc>)
 800378c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff f9ca 	bl	8002b2c <HAL_InitTick>

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40022000 	.word	0x40022000
 80037a8:	40021000 	.word	0x40021000
 80037ac:	08005f90 	.word	0x08005f90
 80037b0:	20000010 	.word	0x20000010
 80037b4:	20000014 	.word	0x20000014

080037b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b8:	b490      	push	{r4, r7}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037c0:	1d3c      	adds	r4, r7, #4
 80037c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037c8:	4b28      	ldr	r3, [pc, #160]	; (800386c <HAL_RCC_GetSysClockFreq+0xb4>)
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	2300      	movs	r3, #0
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037e2:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d002      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0x40>
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d003      	beq.n	80037fe <HAL_RCC_GetSysClockFreq+0x46>
 80037f6:	e02d      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037f8:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037fa:	623b      	str	r3, [r7, #32]
      break;
 80037fc:	e02d      	b.n	800385a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	0c9b      	lsrs	r3, r3, #18
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800380a:	4413      	add	r3, r2
 800380c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003810:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d013      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_RCC_GetSysClockFreq+0xb8>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	0c5b      	lsrs	r3, r3, #17
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800382a:	4413      	add	r3, r2
 800382c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003830:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	4a0f      	ldr	r2, [pc, #60]	; (8003874 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003836:	fb02 f203 	mul.w	r2, r2, r3
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	e004      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	623b      	str	r3, [r7, #32]
      break;
 8003852:	e002      	b.n	800385a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003854:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003856:	623b      	str	r3, [r7, #32]
      break;
 8003858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800385a:	6a3b      	ldr	r3, [r7, #32]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bc90      	pop	{r4, r7}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	08004a3c 	.word	0x08004a3c
 800386c:	08004a4c 	.word	0x08004a4c
 8003870:	40021000 	.word	0x40021000
 8003874:	007a1200 	.word	0x007a1200
 8003878:	003d0900 	.word	0x003d0900

0800387c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <RCC_Delay+0x34>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <RCC_Delay+0x38>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0a5b      	lsrs	r3, r3, #9
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003898:	bf00      	nop
  }
  while (Delay --);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e5a      	subs	r2, r3, #1
 800389e:	60fa      	str	r2, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f9      	bne.n	8003898 <RCC_Delay+0x1c>
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000010 	.word	0x20000010
 80038b4:	10624dd3 	.word	0x10624dd3

080038b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e076      	b.n	80039b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d108      	bne.n	80038e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038da:	d009      	beq.n	80038f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
 80038e2:	e005      	b.n	80038f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff f830 	bl	8002970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003926:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	ea42 0103 	orr.w	r1, r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	0c1a      	lsrs	r2, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f002 0204 	and.w	r2, r2, #4
 8003996:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_SPI_Transmit+0x22>
 80039de:	2302      	movs	r3, #2
 80039e0:	e126      	b.n	8003c30 <HAL_SPI_Transmit+0x270>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ea:	f7ff f8e1 	bl	8002bb0 <HAL_GetTick>
 80039ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d002      	beq.n	8003a06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a04:	e10b      	b.n	8003c1e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_SPI_Transmit+0x52>
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a16:	e102      	b.n	8003c1e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5e:	d10f      	bne.n	8003a80 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d007      	beq.n	8003a9e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa6:	d14b      	bne.n	8003b40 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_SPI_Transmit+0xf6>
 8003ab0:	8afb      	ldrh	r3, [r7, #22]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d13e      	bne.n	8003b34 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	881a      	ldrh	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	1c9a      	adds	r2, r3, #2
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ada:	e02b      	b.n	8003b34 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d112      	bne.n	8003b10 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	881a      	ldrh	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	1c9a      	adds	r2, r3, #2
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b0e:	e011      	b.n	8003b34 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b10:	f7ff f84e 	bl	8002bb0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d803      	bhi.n	8003b28 <HAL_SPI_Transmit+0x168>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d102      	bne.n	8003b2e <HAL_SPI_Transmit+0x16e>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b32:	e074      	b.n	8003c1e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ce      	bne.n	8003adc <HAL_SPI_Transmit+0x11c>
 8003b3e:	e04c      	b.n	8003bda <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_SPI_Transmit+0x18e>
 8003b48:	8afb      	ldrh	r3, [r7, #22]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d140      	bne.n	8003bd0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	7812      	ldrb	r2, [r2, #0]
 8003b5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b74:	e02c      	b.n	8003bd0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d113      	bne.n	8003bac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	7812      	ldrb	r2, [r2, #0]
 8003b90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003baa:	e011      	b.n	8003bd0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bac:	f7ff f800 	bl	8002bb0 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d803      	bhi.n	8003bc4 <HAL_SPI_Transmit+0x204>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d102      	bne.n	8003bca <HAL_SPI_Transmit+0x20a>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bce:	e026      	b.n	8003c1e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1cd      	bne.n	8003b76 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	6839      	ldr	r1, [r7, #0]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f8b2 	bl	8003d48 <SPI_EndRxTxTransaction>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e000      	b.n	8003c1e <HAL_SPI_Transmit+0x25e>
  }

error:
 8003c1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c48:	f7fe ffb2 	bl	8002bb0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	4413      	add	r3, r2
 8003c56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c58:	f7fe ffaa 	bl	8002bb0 <HAL_GetTick>
 8003c5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	015b      	lsls	r3, r3, #5
 8003c64:	0d1b      	lsrs	r3, r3, #20
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c6e:	e054      	b.n	8003d1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d050      	beq.n	8003d1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c78:	f7fe ff9a 	bl	8002bb0 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d902      	bls.n	8003c8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d13d      	bne.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ca6:	d111      	bne.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb0:	d004      	beq.n	8003cbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cba:	d107      	bne.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd4:	d10f      	bne.n	8003cf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e017      	b.n	8003d3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4013      	ands	r3, r2
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	bf0c      	ite	eq
 8003d2a:	2301      	moveq	r3, #1
 8003d2c:	2300      	movne	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d19b      	bne.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000010 	.word	0x20000010

08003d48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff ff6a 	bl	8003c38 <SPI_WaitFlagStateUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e000      	b.n	8003d7c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <__errno>:
 8003d84:	4b01      	ldr	r3, [pc, #4]	; (8003d8c <__errno+0x8>)
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	2000001c 	.word	0x2000001c

08003d90 <__libc_init_array>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	2500      	movs	r5, #0
 8003d94:	4e0c      	ldr	r6, [pc, #48]	; (8003dc8 <__libc_init_array+0x38>)
 8003d96:	4c0d      	ldr	r4, [pc, #52]	; (8003dcc <__libc_init_array+0x3c>)
 8003d98:	1ba4      	subs	r4, r4, r6
 8003d9a:	10a4      	asrs	r4, r4, #2
 8003d9c:	42a5      	cmp	r5, r4
 8003d9e:	d109      	bne.n	8003db4 <__libc_init_array+0x24>
 8003da0:	f000 fd44 	bl	800482c <_init>
 8003da4:	2500      	movs	r5, #0
 8003da6:	4e0a      	ldr	r6, [pc, #40]	; (8003dd0 <__libc_init_array+0x40>)
 8003da8:	4c0a      	ldr	r4, [pc, #40]	; (8003dd4 <__libc_init_array+0x44>)
 8003daa:	1ba4      	subs	r4, r4, r6
 8003dac:	10a4      	asrs	r4, r4, #2
 8003dae:	42a5      	cmp	r5, r4
 8003db0:	d105      	bne.n	8003dbe <__libc_init_array+0x2e>
 8003db2:	bd70      	pop	{r4, r5, r6, pc}
 8003db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003db8:	4798      	blx	r3
 8003dba:	3501      	adds	r5, #1
 8003dbc:	e7ee      	b.n	8003d9c <__libc_init_array+0xc>
 8003dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dc2:	4798      	blx	r3
 8003dc4:	3501      	adds	r5, #1
 8003dc6:	e7f2      	b.n	8003dae <__libc_init_array+0x1e>
 8003dc8:	08005fdc 	.word	0x08005fdc
 8003dcc:	08005fdc 	.word	0x08005fdc
 8003dd0:	08005fdc 	.word	0x08005fdc
 8003dd4:	08005fe0 	.word	0x08005fe0

08003dd8 <malloc>:
 8003dd8:	4b02      	ldr	r3, [pc, #8]	; (8003de4 <malloc+0xc>)
 8003dda:	4601      	mov	r1, r0
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	f000 b857 	b.w	8003e90 <_malloc_r>
 8003de2:	bf00      	nop
 8003de4:	2000001c 	.word	0x2000001c

08003de8 <memset>:
 8003de8:	4603      	mov	r3, r0
 8003dea:	4402      	add	r2, r0
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d100      	bne.n	8003df2 <memset+0xa>
 8003df0:	4770      	bx	lr
 8003df2:	f803 1b01 	strb.w	r1, [r3], #1
 8003df6:	e7f9      	b.n	8003dec <memset+0x4>

08003df8 <_free_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	4605      	mov	r5, r0
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	d043      	beq.n	8003e88 <_free_r+0x90>
 8003e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e04:	1f0c      	subs	r4, r1, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bfb8      	it	lt
 8003e0a:	18e4      	addlt	r4, r4, r3
 8003e0c:	f000 f932 	bl	8004074 <__malloc_lock>
 8003e10:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <_free_r+0x94>)
 8003e12:	6813      	ldr	r3, [r2, #0]
 8003e14:	4610      	mov	r0, r2
 8003e16:	b933      	cbnz	r3, 8003e26 <_free_r+0x2e>
 8003e18:	6063      	str	r3, [r4, #4]
 8003e1a:	6014      	str	r4, [r2, #0]
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e22:	f000 b928 	b.w	8004076 <__malloc_unlock>
 8003e26:	42a3      	cmp	r3, r4
 8003e28:	d90b      	bls.n	8003e42 <_free_r+0x4a>
 8003e2a:	6821      	ldr	r1, [r4, #0]
 8003e2c:	1862      	adds	r2, r4, r1
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	bf01      	itttt	eq
 8003e32:	681a      	ldreq	r2, [r3, #0]
 8003e34:	685b      	ldreq	r3, [r3, #4]
 8003e36:	1852      	addeq	r2, r2, r1
 8003e38:	6022      	streq	r2, [r4, #0]
 8003e3a:	6063      	str	r3, [r4, #4]
 8003e3c:	6004      	str	r4, [r0, #0]
 8003e3e:	e7ed      	b.n	8003e1c <_free_r+0x24>
 8003e40:	4613      	mov	r3, r2
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	b10a      	cbz	r2, 8003e4a <_free_r+0x52>
 8003e46:	42a2      	cmp	r2, r4
 8003e48:	d9fa      	bls.n	8003e40 <_free_r+0x48>
 8003e4a:	6819      	ldr	r1, [r3, #0]
 8003e4c:	1858      	adds	r0, r3, r1
 8003e4e:	42a0      	cmp	r0, r4
 8003e50:	d10b      	bne.n	8003e6a <_free_r+0x72>
 8003e52:	6820      	ldr	r0, [r4, #0]
 8003e54:	4401      	add	r1, r0
 8003e56:	1858      	adds	r0, r3, r1
 8003e58:	4282      	cmp	r2, r0
 8003e5a:	6019      	str	r1, [r3, #0]
 8003e5c:	d1de      	bne.n	8003e1c <_free_r+0x24>
 8003e5e:	6810      	ldr	r0, [r2, #0]
 8003e60:	6852      	ldr	r2, [r2, #4]
 8003e62:	4401      	add	r1, r0
 8003e64:	6019      	str	r1, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	e7d8      	b.n	8003e1c <_free_r+0x24>
 8003e6a:	d902      	bls.n	8003e72 <_free_r+0x7a>
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	602b      	str	r3, [r5, #0]
 8003e70:	e7d4      	b.n	8003e1c <_free_r+0x24>
 8003e72:	6820      	ldr	r0, [r4, #0]
 8003e74:	1821      	adds	r1, r4, r0
 8003e76:	428a      	cmp	r2, r1
 8003e78:	bf01      	itttt	eq
 8003e7a:	6811      	ldreq	r1, [r2, #0]
 8003e7c:	6852      	ldreq	r2, [r2, #4]
 8003e7e:	1809      	addeq	r1, r1, r0
 8003e80:	6021      	streq	r1, [r4, #0]
 8003e82:	6062      	str	r2, [r4, #4]
 8003e84:	605c      	str	r4, [r3, #4]
 8003e86:	e7c9      	b.n	8003e1c <_free_r+0x24>
 8003e88:	bd38      	pop	{r3, r4, r5, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200000a4 	.word	0x200000a4

08003e90 <_malloc_r>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	1ccd      	adds	r5, r1, #3
 8003e94:	f025 0503 	bic.w	r5, r5, #3
 8003e98:	3508      	adds	r5, #8
 8003e9a:	2d0c      	cmp	r5, #12
 8003e9c:	bf38      	it	cc
 8003e9e:	250c      	movcc	r5, #12
 8003ea0:	2d00      	cmp	r5, #0
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	db01      	blt.n	8003eaa <_malloc_r+0x1a>
 8003ea6:	42a9      	cmp	r1, r5
 8003ea8:	d903      	bls.n	8003eb2 <_malloc_r+0x22>
 8003eaa:	230c      	movs	r3, #12
 8003eac:	6033      	str	r3, [r6, #0]
 8003eae:	2000      	movs	r0, #0
 8003eb0:	bd70      	pop	{r4, r5, r6, pc}
 8003eb2:	f000 f8df 	bl	8004074 <__malloc_lock>
 8003eb6:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <_malloc_r+0xac>)
 8003eb8:	6814      	ldr	r4, [r2, #0]
 8003eba:	4621      	mov	r1, r4
 8003ebc:	b991      	cbnz	r1, 8003ee4 <_malloc_r+0x54>
 8003ebe:	4c20      	ldr	r4, [pc, #128]	; (8003f40 <_malloc_r+0xb0>)
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	b91b      	cbnz	r3, 8003ecc <_malloc_r+0x3c>
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f000 f871 	bl	8003fac <_sbrk_r>
 8003eca:	6020      	str	r0, [r4, #0]
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4630      	mov	r0, r6
 8003ed0:	f000 f86c 	bl	8003fac <_sbrk_r>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d124      	bne.n	8003f22 <_malloc_r+0x92>
 8003ed8:	230c      	movs	r3, #12
 8003eda:	4630      	mov	r0, r6
 8003edc:	6033      	str	r3, [r6, #0]
 8003ede:	f000 f8ca 	bl	8004076 <__malloc_unlock>
 8003ee2:	e7e4      	b.n	8003eae <_malloc_r+0x1e>
 8003ee4:	680b      	ldr	r3, [r1, #0]
 8003ee6:	1b5b      	subs	r3, r3, r5
 8003ee8:	d418      	bmi.n	8003f1c <_malloc_r+0x8c>
 8003eea:	2b0b      	cmp	r3, #11
 8003eec:	d90f      	bls.n	8003f0e <_malloc_r+0x7e>
 8003eee:	600b      	str	r3, [r1, #0]
 8003ef0:	18cc      	adds	r4, r1, r3
 8003ef2:	50cd      	str	r5, [r1, r3]
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f000 f8be 	bl	8004076 <__malloc_unlock>
 8003efa:	f104 000b 	add.w	r0, r4, #11
 8003efe:	1d23      	adds	r3, r4, #4
 8003f00:	f020 0007 	bic.w	r0, r0, #7
 8003f04:	1ac3      	subs	r3, r0, r3
 8003f06:	d0d3      	beq.n	8003eb0 <_malloc_r+0x20>
 8003f08:	425a      	negs	r2, r3
 8003f0a:	50e2      	str	r2, [r4, r3]
 8003f0c:	e7d0      	b.n	8003eb0 <_malloc_r+0x20>
 8003f0e:	684b      	ldr	r3, [r1, #4]
 8003f10:	428c      	cmp	r4, r1
 8003f12:	bf16      	itet	ne
 8003f14:	6063      	strne	r3, [r4, #4]
 8003f16:	6013      	streq	r3, [r2, #0]
 8003f18:	460c      	movne	r4, r1
 8003f1a:	e7eb      	b.n	8003ef4 <_malloc_r+0x64>
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	6849      	ldr	r1, [r1, #4]
 8003f20:	e7cc      	b.n	8003ebc <_malloc_r+0x2c>
 8003f22:	1cc4      	adds	r4, r0, #3
 8003f24:	f024 0403 	bic.w	r4, r4, #3
 8003f28:	42a0      	cmp	r0, r4
 8003f2a:	d005      	beq.n	8003f38 <_malloc_r+0xa8>
 8003f2c:	1a21      	subs	r1, r4, r0
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f000 f83c 	bl	8003fac <_sbrk_r>
 8003f34:	3001      	adds	r0, #1
 8003f36:	d0cf      	beq.n	8003ed8 <_malloc_r+0x48>
 8003f38:	6025      	str	r5, [r4, #0]
 8003f3a:	e7db      	b.n	8003ef4 <_malloc_r+0x64>
 8003f3c:	200000a4 	.word	0x200000a4
 8003f40:	200000a8 	.word	0x200000a8

08003f44 <rand>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <rand+0x50>)
 8003f48:	681c      	ldr	r4, [r3, #0]
 8003f4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f4c:	b97b      	cbnz	r3, 8003f6e <rand+0x2a>
 8003f4e:	2018      	movs	r0, #24
 8003f50:	f7ff ff42 	bl	8003dd8 <malloc>
 8003f54:	4a10      	ldr	r2, [pc, #64]	; (8003f98 <rand+0x54>)
 8003f56:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <rand+0x58>)
 8003f58:	63a0      	str	r0, [r4, #56]	; 0x38
 8003f5a:	e9c0 2300 	strd	r2, r3, [r0]
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <rand+0x5c>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	6083      	str	r3, [r0, #8]
 8003f64:	230b      	movs	r3, #11
 8003f66:	8183      	strh	r3, [r0, #12]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003f6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003f70:	480c      	ldr	r0, [pc, #48]	; (8003fa4 <rand+0x60>)
 8003f72:	690a      	ldr	r2, [r1, #16]
 8003f74:	694b      	ldr	r3, [r1, #20]
 8003f76:	4350      	muls	r0, r2
 8003f78:	4c0b      	ldr	r4, [pc, #44]	; (8003fa8 <rand+0x64>)
 8003f7a:	fb04 0003 	mla	r0, r4, r3, r0
 8003f7e:	fba2 2304 	umull	r2, r3, r2, r4
 8003f82:	4403      	add	r3, r0
 8003f84:	1c54      	adds	r4, r2, #1
 8003f86:	f143 0500 	adc.w	r5, r3, #0
 8003f8a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003f8e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	2000001c 	.word	0x2000001c
 8003f98:	abcd330e 	.word	0xabcd330e
 8003f9c:	e66d1234 	.word	0xe66d1234
 8003fa0:	0005deec 	.word	0x0005deec
 8003fa4:	5851f42d 	.word	0x5851f42d
 8003fa8:	4c957f2d 	.word	0x4c957f2d

08003fac <_sbrk_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	2300      	movs	r3, #0
 8003fb0:	4c05      	ldr	r4, [pc, #20]	; (8003fc8 <_sbrk_r+0x1c>)
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	4608      	mov	r0, r1
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	f7fe fd40 	bl	8002a3c <_sbrk>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d102      	bne.n	8003fc6 <_sbrk_r+0x1a>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	b103      	cbz	r3, 8003fc6 <_sbrk_r+0x1a>
 8003fc4:	602b      	str	r3, [r5, #0]
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	20000108 	.word	0x20000108

08003fcc <sniprintf>:
 8003fcc:	b40c      	push	{r2, r3}
 8003fce:	b530      	push	{r4, r5, lr}
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <sniprintf+0x64>)
 8003fd2:	1e0c      	subs	r4, r1, #0
 8003fd4:	b09d      	sub	sp, #116	; 0x74
 8003fd6:	681d      	ldr	r5, [r3, #0]
 8003fd8:	da08      	bge.n	8003fec <sniprintf+0x20>
 8003fda:	238b      	movs	r3, #139	; 0x8b
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	b01d      	add	sp, #116	; 0x74
 8003fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fe8:	b002      	add	sp, #8
 8003fea:	4770      	bx	lr
 8003fec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003ff0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ff4:	bf0c      	ite	eq
 8003ff6:	4623      	moveq	r3, r4
 8003ff8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ffc:	9304      	str	r3, [sp, #16]
 8003ffe:	9307      	str	r3, [sp, #28]
 8004000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004004:	9002      	str	r0, [sp, #8]
 8004006:	9006      	str	r0, [sp, #24]
 8004008:	f8ad 3016 	strh.w	r3, [sp, #22]
 800400c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800400e:	ab21      	add	r3, sp, #132	; 0x84
 8004010:	a902      	add	r1, sp, #8
 8004012:	4628      	mov	r0, r5
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	f000 f889 	bl	800412c <_svfiprintf_r>
 800401a:	1c43      	adds	r3, r0, #1
 800401c:	bfbc      	itt	lt
 800401e:	238b      	movlt	r3, #139	; 0x8b
 8004020:	602b      	strlt	r3, [r5, #0]
 8004022:	2c00      	cmp	r4, #0
 8004024:	d0dd      	beq.n	8003fe2 <sniprintf+0x16>
 8004026:	2200      	movs	r2, #0
 8004028:	9b02      	ldr	r3, [sp, #8]
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e7d9      	b.n	8003fe2 <sniprintf+0x16>
 800402e:	bf00      	nop
 8004030:	2000001c 	.word	0x2000001c

08004034 <siprintf>:
 8004034:	b40e      	push	{r1, r2, r3}
 8004036:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800403a:	b500      	push	{lr}
 800403c:	b09c      	sub	sp, #112	; 0x70
 800403e:	ab1d      	add	r3, sp, #116	; 0x74
 8004040:	9002      	str	r0, [sp, #8]
 8004042:	9006      	str	r0, [sp, #24]
 8004044:	9107      	str	r1, [sp, #28]
 8004046:	9104      	str	r1, [sp, #16]
 8004048:	4808      	ldr	r0, [pc, #32]	; (800406c <siprintf+0x38>)
 800404a:	4909      	ldr	r1, [pc, #36]	; (8004070 <siprintf+0x3c>)
 800404c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004050:	9105      	str	r1, [sp, #20]
 8004052:	6800      	ldr	r0, [r0, #0]
 8004054:	a902      	add	r1, sp, #8
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	f000 f868 	bl	800412c <_svfiprintf_r>
 800405c:	2200      	movs	r2, #0
 800405e:	9b02      	ldr	r3, [sp, #8]
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	b01c      	add	sp, #112	; 0x70
 8004064:	f85d eb04 	ldr.w	lr, [sp], #4
 8004068:	b003      	add	sp, #12
 800406a:	4770      	bx	lr
 800406c:	2000001c 	.word	0x2000001c
 8004070:	ffff0208 	.word	0xffff0208

08004074 <__malloc_lock>:
 8004074:	4770      	bx	lr

08004076 <__malloc_unlock>:
 8004076:	4770      	bx	lr

08004078 <__ssputs_r>:
 8004078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800407c:	688e      	ldr	r6, [r1, #8]
 800407e:	4682      	mov	sl, r0
 8004080:	429e      	cmp	r6, r3
 8004082:	460c      	mov	r4, r1
 8004084:	4690      	mov	r8, r2
 8004086:	4699      	mov	r9, r3
 8004088:	d837      	bhi.n	80040fa <__ssputs_r+0x82>
 800408a:	898a      	ldrh	r2, [r1, #12]
 800408c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004090:	d031      	beq.n	80040f6 <__ssputs_r+0x7e>
 8004092:	2302      	movs	r3, #2
 8004094:	6825      	ldr	r5, [r4, #0]
 8004096:	6909      	ldr	r1, [r1, #16]
 8004098:	1a6f      	subs	r7, r5, r1
 800409a:	6965      	ldr	r5, [r4, #20]
 800409c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80040a4:	f109 0301 	add.w	r3, r9, #1
 80040a8:	443b      	add	r3, r7
 80040aa:	429d      	cmp	r5, r3
 80040ac:	bf38      	it	cc
 80040ae:	461d      	movcc	r5, r3
 80040b0:	0553      	lsls	r3, r2, #21
 80040b2:	d530      	bpl.n	8004116 <__ssputs_r+0x9e>
 80040b4:	4629      	mov	r1, r5
 80040b6:	f7ff feeb 	bl	8003e90 <_malloc_r>
 80040ba:	4606      	mov	r6, r0
 80040bc:	b950      	cbnz	r0, 80040d4 <__ssputs_r+0x5c>
 80040be:	230c      	movs	r3, #12
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	f8ca 3000 	str.w	r3, [sl]
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ce:	81a3      	strh	r3, [r4, #12]
 80040d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d4:	463a      	mov	r2, r7
 80040d6:	6921      	ldr	r1, [r4, #16]
 80040d8:	f000 fab6 	bl	8004648 <memcpy>
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e6:	81a3      	strh	r3, [r4, #12]
 80040e8:	6126      	str	r6, [r4, #16]
 80040ea:	443e      	add	r6, r7
 80040ec:	6026      	str	r6, [r4, #0]
 80040ee:	464e      	mov	r6, r9
 80040f0:	6165      	str	r5, [r4, #20]
 80040f2:	1bed      	subs	r5, r5, r7
 80040f4:	60a5      	str	r5, [r4, #8]
 80040f6:	454e      	cmp	r6, r9
 80040f8:	d900      	bls.n	80040fc <__ssputs_r+0x84>
 80040fa:	464e      	mov	r6, r9
 80040fc:	4632      	mov	r2, r6
 80040fe:	4641      	mov	r1, r8
 8004100:	6820      	ldr	r0, [r4, #0]
 8004102:	f000 faac 	bl	800465e <memmove>
 8004106:	68a3      	ldr	r3, [r4, #8]
 8004108:	2000      	movs	r0, #0
 800410a:	1b9b      	subs	r3, r3, r6
 800410c:	60a3      	str	r3, [r4, #8]
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	441e      	add	r6, r3
 8004112:	6026      	str	r6, [r4, #0]
 8004114:	e7dc      	b.n	80040d0 <__ssputs_r+0x58>
 8004116:	462a      	mov	r2, r5
 8004118:	f000 faba 	bl	8004690 <_realloc_r>
 800411c:	4606      	mov	r6, r0
 800411e:	2800      	cmp	r0, #0
 8004120:	d1e2      	bne.n	80040e8 <__ssputs_r+0x70>
 8004122:	6921      	ldr	r1, [r4, #16]
 8004124:	4650      	mov	r0, sl
 8004126:	f7ff fe67 	bl	8003df8 <_free_r>
 800412a:	e7c8      	b.n	80040be <__ssputs_r+0x46>

0800412c <_svfiprintf_r>:
 800412c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004130:	461d      	mov	r5, r3
 8004132:	898b      	ldrh	r3, [r1, #12]
 8004134:	b09d      	sub	sp, #116	; 0x74
 8004136:	061f      	lsls	r7, r3, #24
 8004138:	4680      	mov	r8, r0
 800413a:	460c      	mov	r4, r1
 800413c:	4616      	mov	r6, r2
 800413e:	d50f      	bpl.n	8004160 <_svfiprintf_r+0x34>
 8004140:	690b      	ldr	r3, [r1, #16]
 8004142:	b96b      	cbnz	r3, 8004160 <_svfiprintf_r+0x34>
 8004144:	2140      	movs	r1, #64	; 0x40
 8004146:	f7ff fea3 	bl	8003e90 <_malloc_r>
 800414a:	6020      	str	r0, [r4, #0]
 800414c:	6120      	str	r0, [r4, #16]
 800414e:	b928      	cbnz	r0, 800415c <_svfiprintf_r+0x30>
 8004150:	230c      	movs	r3, #12
 8004152:	f8c8 3000 	str.w	r3, [r8]
 8004156:	f04f 30ff 	mov.w	r0, #4294967295
 800415a:	e0c8      	b.n	80042ee <_svfiprintf_r+0x1c2>
 800415c:	2340      	movs	r3, #64	; 0x40
 800415e:	6163      	str	r3, [r4, #20]
 8004160:	2300      	movs	r3, #0
 8004162:	9309      	str	r3, [sp, #36]	; 0x24
 8004164:	2320      	movs	r3, #32
 8004166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800416a:	2330      	movs	r3, #48	; 0x30
 800416c:	f04f 0b01 	mov.w	fp, #1
 8004170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004174:	9503      	str	r5, [sp, #12]
 8004176:	4637      	mov	r7, r6
 8004178:	463d      	mov	r5, r7
 800417a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800417e:	b10b      	cbz	r3, 8004184 <_svfiprintf_r+0x58>
 8004180:	2b25      	cmp	r3, #37	; 0x25
 8004182:	d13e      	bne.n	8004202 <_svfiprintf_r+0xd6>
 8004184:	ebb7 0a06 	subs.w	sl, r7, r6
 8004188:	d00b      	beq.n	80041a2 <_svfiprintf_r+0x76>
 800418a:	4653      	mov	r3, sl
 800418c:	4632      	mov	r2, r6
 800418e:	4621      	mov	r1, r4
 8004190:	4640      	mov	r0, r8
 8004192:	f7ff ff71 	bl	8004078 <__ssputs_r>
 8004196:	3001      	adds	r0, #1
 8004198:	f000 80a4 	beq.w	80042e4 <_svfiprintf_r+0x1b8>
 800419c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800419e:	4453      	add	r3, sl
 80041a0:	9309      	str	r3, [sp, #36]	; 0x24
 80041a2:	783b      	ldrb	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 809d 	beq.w	80042e4 <_svfiprintf_r+0x1b8>
 80041aa:	2300      	movs	r3, #0
 80041ac:	f04f 32ff 	mov.w	r2, #4294967295
 80041b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041b4:	9304      	str	r3, [sp, #16]
 80041b6:	9307      	str	r3, [sp, #28]
 80041b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041bc:	931a      	str	r3, [sp, #104]	; 0x68
 80041be:	462f      	mov	r7, r5
 80041c0:	2205      	movs	r2, #5
 80041c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80041c6:	4850      	ldr	r0, [pc, #320]	; (8004308 <_svfiprintf_r+0x1dc>)
 80041c8:	f000 fa30 	bl	800462c <memchr>
 80041cc:	9b04      	ldr	r3, [sp, #16]
 80041ce:	b9d0      	cbnz	r0, 8004206 <_svfiprintf_r+0xda>
 80041d0:	06d9      	lsls	r1, r3, #27
 80041d2:	bf44      	itt	mi
 80041d4:	2220      	movmi	r2, #32
 80041d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041da:	071a      	lsls	r2, r3, #28
 80041dc:	bf44      	itt	mi
 80041de:	222b      	movmi	r2, #43	; 0x2b
 80041e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041e4:	782a      	ldrb	r2, [r5, #0]
 80041e6:	2a2a      	cmp	r2, #42	; 0x2a
 80041e8:	d015      	beq.n	8004216 <_svfiprintf_r+0xea>
 80041ea:	462f      	mov	r7, r5
 80041ec:	2000      	movs	r0, #0
 80041ee:	250a      	movs	r5, #10
 80041f0:	9a07      	ldr	r2, [sp, #28]
 80041f2:	4639      	mov	r1, r7
 80041f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041f8:	3b30      	subs	r3, #48	; 0x30
 80041fa:	2b09      	cmp	r3, #9
 80041fc:	d94d      	bls.n	800429a <_svfiprintf_r+0x16e>
 80041fe:	b1b8      	cbz	r0, 8004230 <_svfiprintf_r+0x104>
 8004200:	e00f      	b.n	8004222 <_svfiprintf_r+0xf6>
 8004202:	462f      	mov	r7, r5
 8004204:	e7b8      	b.n	8004178 <_svfiprintf_r+0x4c>
 8004206:	4a40      	ldr	r2, [pc, #256]	; (8004308 <_svfiprintf_r+0x1dc>)
 8004208:	463d      	mov	r5, r7
 800420a:	1a80      	subs	r0, r0, r2
 800420c:	fa0b f000 	lsl.w	r0, fp, r0
 8004210:	4318      	orrs	r0, r3
 8004212:	9004      	str	r0, [sp, #16]
 8004214:	e7d3      	b.n	80041be <_svfiprintf_r+0x92>
 8004216:	9a03      	ldr	r2, [sp, #12]
 8004218:	1d11      	adds	r1, r2, #4
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	9103      	str	r1, [sp, #12]
 800421e:	2a00      	cmp	r2, #0
 8004220:	db01      	blt.n	8004226 <_svfiprintf_r+0xfa>
 8004222:	9207      	str	r2, [sp, #28]
 8004224:	e004      	b.n	8004230 <_svfiprintf_r+0x104>
 8004226:	4252      	negs	r2, r2
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	9207      	str	r2, [sp, #28]
 800422e:	9304      	str	r3, [sp, #16]
 8004230:	783b      	ldrb	r3, [r7, #0]
 8004232:	2b2e      	cmp	r3, #46	; 0x2e
 8004234:	d10c      	bne.n	8004250 <_svfiprintf_r+0x124>
 8004236:	787b      	ldrb	r3, [r7, #1]
 8004238:	2b2a      	cmp	r3, #42	; 0x2a
 800423a:	d133      	bne.n	80042a4 <_svfiprintf_r+0x178>
 800423c:	9b03      	ldr	r3, [sp, #12]
 800423e:	3702      	adds	r7, #2
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	9203      	str	r2, [sp, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	bfb8      	it	lt
 800424a:	f04f 33ff 	movlt.w	r3, #4294967295
 800424e:	9305      	str	r3, [sp, #20]
 8004250:	4d2e      	ldr	r5, [pc, #184]	; (800430c <_svfiprintf_r+0x1e0>)
 8004252:	2203      	movs	r2, #3
 8004254:	7839      	ldrb	r1, [r7, #0]
 8004256:	4628      	mov	r0, r5
 8004258:	f000 f9e8 	bl	800462c <memchr>
 800425c:	b138      	cbz	r0, 800426e <_svfiprintf_r+0x142>
 800425e:	2340      	movs	r3, #64	; 0x40
 8004260:	1b40      	subs	r0, r0, r5
 8004262:	fa03 f000 	lsl.w	r0, r3, r0
 8004266:	9b04      	ldr	r3, [sp, #16]
 8004268:	3701      	adds	r7, #1
 800426a:	4303      	orrs	r3, r0
 800426c:	9304      	str	r3, [sp, #16]
 800426e:	7839      	ldrb	r1, [r7, #0]
 8004270:	2206      	movs	r2, #6
 8004272:	4827      	ldr	r0, [pc, #156]	; (8004310 <_svfiprintf_r+0x1e4>)
 8004274:	1c7e      	adds	r6, r7, #1
 8004276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800427a:	f000 f9d7 	bl	800462c <memchr>
 800427e:	2800      	cmp	r0, #0
 8004280:	d038      	beq.n	80042f4 <_svfiprintf_r+0x1c8>
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <_svfiprintf_r+0x1e8>)
 8004284:	bb13      	cbnz	r3, 80042cc <_svfiprintf_r+0x1a0>
 8004286:	9b03      	ldr	r3, [sp, #12]
 8004288:	3307      	adds	r3, #7
 800428a:	f023 0307 	bic.w	r3, r3, #7
 800428e:	3308      	adds	r3, #8
 8004290:	9303      	str	r3, [sp, #12]
 8004292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004294:	444b      	add	r3, r9
 8004296:	9309      	str	r3, [sp, #36]	; 0x24
 8004298:	e76d      	b.n	8004176 <_svfiprintf_r+0x4a>
 800429a:	fb05 3202 	mla	r2, r5, r2, r3
 800429e:	2001      	movs	r0, #1
 80042a0:	460f      	mov	r7, r1
 80042a2:	e7a6      	b.n	80041f2 <_svfiprintf_r+0xc6>
 80042a4:	2300      	movs	r3, #0
 80042a6:	250a      	movs	r5, #10
 80042a8:	4619      	mov	r1, r3
 80042aa:	3701      	adds	r7, #1
 80042ac:	9305      	str	r3, [sp, #20]
 80042ae:	4638      	mov	r0, r7
 80042b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042b4:	3a30      	subs	r2, #48	; 0x30
 80042b6:	2a09      	cmp	r2, #9
 80042b8:	d903      	bls.n	80042c2 <_svfiprintf_r+0x196>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0c8      	beq.n	8004250 <_svfiprintf_r+0x124>
 80042be:	9105      	str	r1, [sp, #20]
 80042c0:	e7c6      	b.n	8004250 <_svfiprintf_r+0x124>
 80042c2:	fb05 2101 	mla	r1, r5, r1, r2
 80042c6:	2301      	movs	r3, #1
 80042c8:	4607      	mov	r7, r0
 80042ca:	e7f0      	b.n	80042ae <_svfiprintf_r+0x182>
 80042cc:	ab03      	add	r3, sp, #12
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	4622      	mov	r2, r4
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <_svfiprintf_r+0x1ec>)
 80042d4:	a904      	add	r1, sp, #16
 80042d6:	4640      	mov	r0, r8
 80042d8:	f3af 8000 	nop.w
 80042dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80042e0:	4681      	mov	r9, r0
 80042e2:	d1d6      	bne.n	8004292 <_svfiprintf_r+0x166>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	065b      	lsls	r3, r3, #25
 80042e8:	f53f af35 	bmi.w	8004156 <_svfiprintf_r+0x2a>
 80042ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042ee:	b01d      	add	sp, #116	; 0x74
 80042f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f4:	ab03      	add	r3, sp, #12
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	4622      	mov	r2, r4
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <_svfiprintf_r+0x1ec>)
 80042fc:	a904      	add	r1, sp, #16
 80042fe:	4640      	mov	r0, r8
 8004300:	f000 f882 	bl	8004408 <_printf_i>
 8004304:	e7ea      	b.n	80042dc <_svfiprintf_r+0x1b0>
 8004306:	bf00      	nop
 8004308:	08005fa0 	.word	0x08005fa0
 800430c:	08005fa6 	.word	0x08005fa6
 8004310:	08005faa 	.word	0x08005faa
 8004314:	00000000 	.word	0x00000000
 8004318:	08004079 	.word	0x08004079

0800431c <_printf_common>:
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004320:	4691      	mov	r9, r2
 8004322:	461f      	mov	r7, r3
 8004324:	688a      	ldr	r2, [r1, #8]
 8004326:	690b      	ldr	r3, [r1, #16]
 8004328:	4606      	mov	r6, r0
 800432a:	4293      	cmp	r3, r2
 800432c:	bfb8      	it	lt
 800432e:	4613      	movlt	r3, r2
 8004330:	f8c9 3000 	str.w	r3, [r9]
 8004334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004338:	460c      	mov	r4, r1
 800433a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800433e:	b112      	cbz	r2, 8004346 <_printf_common+0x2a>
 8004340:	3301      	adds	r3, #1
 8004342:	f8c9 3000 	str.w	r3, [r9]
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	0699      	lsls	r1, r3, #26
 800434a:	bf42      	ittt	mi
 800434c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004350:	3302      	addmi	r3, #2
 8004352:	f8c9 3000 	strmi.w	r3, [r9]
 8004356:	6825      	ldr	r5, [r4, #0]
 8004358:	f015 0506 	ands.w	r5, r5, #6
 800435c:	d107      	bne.n	800436e <_printf_common+0x52>
 800435e:	f104 0a19 	add.w	sl, r4, #25
 8004362:	68e3      	ldr	r3, [r4, #12]
 8004364:	f8d9 2000 	ldr.w	r2, [r9]
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	42ab      	cmp	r3, r5
 800436c:	dc29      	bgt.n	80043c2 <_printf_common+0xa6>
 800436e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	3300      	adds	r3, #0
 8004376:	bf18      	it	ne
 8004378:	2301      	movne	r3, #1
 800437a:	0692      	lsls	r2, r2, #26
 800437c:	d42e      	bmi.n	80043dc <_printf_common+0xc0>
 800437e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004382:	4639      	mov	r1, r7
 8004384:	4630      	mov	r0, r6
 8004386:	47c0      	blx	r8
 8004388:	3001      	adds	r0, #1
 800438a:	d021      	beq.n	80043d0 <_printf_common+0xb4>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	68e5      	ldr	r5, [r4, #12]
 8004390:	f003 0306 	and.w	r3, r3, #6
 8004394:	2b04      	cmp	r3, #4
 8004396:	bf18      	it	ne
 8004398:	2500      	movne	r5, #0
 800439a:	f8d9 2000 	ldr.w	r2, [r9]
 800439e:	f04f 0900 	mov.w	r9, #0
 80043a2:	bf08      	it	eq
 80043a4:	1aad      	subeq	r5, r5, r2
 80043a6:	68a3      	ldr	r3, [r4, #8]
 80043a8:	6922      	ldr	r2, [r4, #16]
 80043aa:	bf08      	it	eq
 80043ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bfc4      	itt	gt
 80043b4:	1a9b      	subgt	r3, r3, r2
 80043b6:	18ed      	addgt	r5, r5, r3
 80043b8:	341a      	adds	r4, #26
 80043ba:	454d      	cmp	r5, r9
 80043bc:	d11a      	bne.n	80043f4 <_printf_common+0xd8>
 80043be:	2000      	movs	r0, #0
 80043c0:	e008      	b.n	80043d4 <_printf_common+0xb8>
 80043c2:	2301      	movs	r3, #1
 80043c4:	4652      	mov	r2, sl
 80043c6:	4639      	mov	r1, r7
 80043c8:	4630      	mov	r0, r6
 80043ca:	47c0      	blx	r8
 80043cc:	3001      	adds	r0, #1
 80043ce:	d103      	bne.n	80043d8 <_printf_common+0xbc>
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295
 80043d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d8:	3501      	adds	r5, #1
 80043da:	e7c2      	b.n	8004362 <_printf_common+0x46>
 80043dc:	2030      	movs	r0, #48	; 0x30
 80043de:	18e1      	adds	r1, r4, r3
 80043e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043ea:	4422      	add	r2, r4
 80043ec:	3302      	adds	r3, #2
 80043ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043f2:	e7c4      	b.n	800437e <_printf_common+0x62>
 80043f4:	2301      	movs	r3, #1
 80043f6:	4622      	mov	r2, r4
 80043f8:	4639      	mov	r1, r7
 80043fa:	4630      	mov	r0, r6
 80043fc:	47c0      	blx	r8
 80043fe:	3001      	adds	r0, #1
 8004400:	d0e6      	beq.n	80043d0 <_printf_common+0xb4>
 8004402:	f109 0901 	add.w	r9, r9, #1
 8004406:	e7d8      	b.n	80043ba <_printf_common+0x9e>

08004408 <_printf_i>:
 8004408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800440c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004410:	460c      	mov	r4, r1
 8004412:	7e09      	ldrb	r1, [r1, #24]
 8004414:	b085      	sub	sp, #20
 8004416:	296e      	cmp	r1, #110	; 0x6e
 8004418:	4617      	mov	r7, r2
 800441a:	4606      	mov	r6, r0
 800441c:	4698      	mov	r8, r3
 800441e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004420:	f000 80b3 	beq.w	800458a <_printf_i+0x182>
 8004424:	d822      	bhi.n	800446c <_printf_i+0x64>
 8004426:	2963      	cmp	r1, #99	; 0x63
 8004428:	d036      	beq.n	8004498 <_printf_i+0x90>
 800442a:	d80a      	bhi.n	8004442 <_printf_i+0x3a>
 800442c:	2900      	cmp	r1, #0
 800442e:	f000 80b9 	beq.w	80045a4 <_printf_i+0x19c>
 8004432:	2958      	cmp	r1, #88	; 0x58
 8004434:	f000 8083 	beq.w	800453e <_printf_i+0x136>
 8004438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800443c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004440:	e032      	b.n	80044a8 <_printf_i+0xa0>
 8004442:	2964      	cmp	r1, #100	; 0x64
 8004444:	d001      	beq.n	800444a <_printf_i+0x42>
 8004446:	2969      	cmp	r1, #105	; 0x69
 8004448:	d1f6      	bne.n	8004438 <_printf_i+0x30>
 800444a:	6820      	ldr	r0, [r4, #0]
 800444c:	6813      	ldr	r3, [r2, #0]
 800444e:	0605      	lsls	r5, r0, #24
 8004450:	f103 0104 	add.w	r1, r3, #4
 8004454:	d52a      	bpl.n	80044ac <_printf_i+0xa4>
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	da03      	bge.n	8004466 <_printf_i+0x5e>
 800445e:	222d      	movs	r2, #45	; 0x2d
 8004460:	425b      	negs	r3, r3
 8004462:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004466:	486f      	ldr	r0, [pc, #444]	; (8004624 <_printf_i+0x21c>)
 8004468:	220a      	movs	r2, #10
 800446a:	e039      	b.n	80044e0 <_printf_i+0xd8>
 800446c:	2973      	cmp	r1, #115	; 0x73
 800446e:	f000 809d 	beq.w	80045ac <_printf_i+0x1a4>
 8004472:	d808      	bhi.n	8004486 <_printf_i+0x7e>
 8004474:	296f      	cmp	r1, #111	; 0x6f
 8004476:	d020      	beq.n	80044ba <_printf_i+0xb2>
 8004478:	2970      	cmp	r1, #112	; 0x70
 800447a:	d1dd      	bne.n	8004438 <_printf_i+0x30>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	f043 0320 	orr.w	r3, r3, #32
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	e003      	b.n	800448e <_printf_i+0x86>
 8004486:	2975      	cmp	r1, #117	; 0x75
 8004488:	d017      	beq.n	80044ba <_printf_i+0xb2>
 800448a:	2978      	cmp	r1, #120	; 0x78
 800448c:	d1d4      	bne.n	8004438 <_printf_i+0x30>
 800448e:	2378      	movs	r3, #120	; 0x78
 8004490:	4865      	ldr	r0, [pc, #404]	; (8004628 <_printf_i+0x220>)
 8004492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004496:	e055      	b.n	8004544 <_printf_i+0x13c>
 8004498:	6813      	ldr	r3, [r2, #0]
 800449a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800449e:	1d19      	adds	r1, r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6011      	str	r1, [r2, #0]
 80044a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044a8:	2301      	movs	r3, #1
 80044aa:	e08c      	b.n	80045c6 <_printf_i+0x1be>
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044b2:	6011      	str	r1, [r2, #0]
 80044b4:	bf18      	it	ne
 80044b6:	b21b      	sxthne	r3, r3
 80044b8:	e7cf      	b.n	800445a <_printf_i+0x52>
 80044ba:	6813      	ldr	r3, [r2, #0]
 80044bc:	6825      	ldr	r5, [r4, #0]
 80044be:	1d18      	adds	r0, r3, #4
 80044c0:	6010      	str	r0, [r2, #0]
 80044c2:	0628      	lsls	r0, r5, #24
 80044c4:	d501      	bpl.n	80044ca <_printf_i+0xc2>
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	e002      	b.n	80044d0 <_printf_i+0xc8>
 80044ca:	0668      	lsls	r0, r5, #25
 80044cc:	d5fb      	bpl.n	80044c6 <_printf_i+0xbe>
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	296f      	cmp	r1, #111	; 0x6f
 80044d2:	bf14      	ite	ne
 80044d4:	220a      	movne	r2, #10
 80044d6:	2208      	moveq	r2, #8
 80044d8:	4852      	ldr	r0, [pc, #328]	; (8004624 <_printf_i+0x21c>)
 80044da:	2100      	movs	r1, #0
 80044dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044e0:	6865      	ldr	r5, [r4, #4]
 80044e2:	2d00      	cmp	r5, #0
 80044e4:	60a5      	str	r5, [r4, #8]
 80044e6:	f2c0 8095 	blt.w	8004614 <_printf_i+0x20c>
 80044ea:	6821      	ldr	r1, [r4, #0]
 80044ec:	f021 0104 	bic.w	r1, r1, #4
 80044f0:	6021      	str	r1, [r4, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d13d      	bne.n	8004572 <_printf_i+0x16a>
 80044f6:	2d00      	cmp	r5, #0
 80044f8:	f040 808e 	bne.w	8004618 <_printf_i+0x210>
 80044fc:	4665      	mov	r5, ip
 80044fe:	2a08      	cmp	r2, #8
 8004500:	d10b      	bne.n	800451a <_printf_i+0x112>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	07db      	lsls	r3, r3, #31
 8004506:	d508      	bpl.n	800451a <_printf_i+0x112>
 8004508:	6923      	ldr	r3, [r4, #16]
 800450a:	6862      	ldr	r2, [r4, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	bfde      	ittt	le
 8004510:	2330      	movle	r3, #48	; 0x30
 8004512:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004516:	f105 35ff 	addle.w	r5, r5, #4294967295
 800451a:	ebac 0305 	sub.w	r3, ip, r5
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	f8cd 8000 	str.w	r8, [sp]
 8004524:	463b      	mov	r3, r7
 8004526:	aa03      	add	r2, sp, #12
 8004528:	4621      	mov	r1, r4
 800452a:	4630      	mov	r0, r6
 800452c:	f7ff fef6 	bl	800431c <_printf_common>
 8004530:	3001      	adds	r0, #1
 8004532:	d14d      	bne.n	80045d0 <_printf_i+0x1c8>
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	b005      	add	sp, #20
 800453a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800453e:	4839      	ldr	r0, [pc, #228]	; (8004624 <_printf_i+0x21c>)
 8004540:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004544:	6813      	ldr	r3, [r2, #0]
 8004546:	6821      	ldr	r1, [r4, #0]
 8004548:	1d1d      	adds	r5, r3, #4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6015      	str	r5, [r2, #0]
 800454e:	060a      	lsls	r2, r1, #24
 8004550:	d50b      	bpl.n	800456a <_printf_i+0x162>
 8004552:	07ca      	lsls	r2, r1, #31
 8004554:	bf44      	itt	mi
 8004556:	f041 0120 	orrmi.w	r1, r1, #32
 800455a:	6021      	strmi	r1, [r4, #0]
 800455c:	b91b      	cbnz	r3, 8004566 <_printf_i+0x15e>
 800455e:	6822      	ldr	r2, [r4, #0]
 8004560:	f022 0220 	bic.w	r2, r2, #32
 8004564:	6022      	str	r2, [r4, #0]
 8004566:	2210      	movs	r2, #16
 8004568:	e7b7      	b.n	80044da <_printf_i+0xd2>
 800456a:	064d      	lsls	r5, r1, #25
 800456c:	bf48      	it	mi
 800456e:	b29b      	uxthmi	r3, r3
 8004570:	e7ef      	b.n	8004552 <_printf_i+0x14a>
 8004572:	4665      	mov	r5, ip
 8004574:	fbb3 f1f2 	udiv	r1, r3, r2
 8004578:	fb02 3311 	mls	r3, r2, r1, r3
 800457c:	5cc3      	ldrb	r3, [r0, r3]
 800457e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004582:	460b      	mov	r3, r1
 8004584:	2900      	cmp	r1, #0
 8004586:	d1f5      	bne.n	8004574 <_printf_i+0x16c>
 8004588:	e7b9      	b.n	80044fe <_printf_i+0xf6>
 800458a:	6813      	ldr	r3, [r2, #0]
 800458c:	6825      	ldr	r5, [r4, #0]
 800458e:	1d18      	adds	r0, r3, #4
 8004590:	6961      	ldr	r1, [r4, #20]
 8004592:	6010      	str	r0, [r2, #0]
 8004594:	0628      	lsls	r0, r5, #24
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	d501      	bpl.n	800459e <_printf_i+0x196>
 800459a:	6019      	str	r1, [r3, #0]
 800459c:	e002      	b.n	80045a4 <_printf_i+0x19c>
 800459e:	066a      	lsls	r2, r5, #25
 80045a0:	d5fb      	bpl.n	800459a <_printf_i+0x192>
 80045a2:	8019      	strh	r1, [r3, #0]
 80045a4:	2300      	movs	r3, #0
 80045a6:	4665      	mov	r5, ip
 80045a8:	6123      	str	r3, [r4, #16]
 80045aa:	e7b9      	b.n	8004520 <_printf_i+0x118>
 80045ac:	6813      	ldr	r3, [r2, #0]
 80045ae:	1d19      	adds	r1, r3, #4
 80045b0:	6011      	str	r1, [r2, #0]
 80045b2:	681d      	ldr	r5, [r3, #0]
 80045b4:	6862      	ldr	r2, [r4, #4]
 80045b6:	2100      	movs	r1, #0
 80045b8:	4628      	mov	r0, r5
 80045ba:	f000 f837 	bl	800462c <memchr>
 80045be:	b108      	cbz	r0, 80045c4 <_printf_i+0x1bc>
 80045c0:	1b40      	subs	r0, r0, r5
 80045c2:	6060      	str	r0, [r4, #4]
 80045c4:	6863      	ldr	r3, [r4, #4]
 80045c6:	6123      	str	r3, [r4, #16]
 80045c8:	2300      	movs	r3, #0
 80045ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ce:	e7a7      	b.n	8004520 <_printf_i+0x118>
 80045d0:	6923      	ldr	r3, [r4, #16]
 80045d2:	462a      	mov	r2, r5
 80045d4:	4639      	mov	r1, r7
 80045d6:	4630      	mov	r0, r6
 80045d8:	47c0      	blx	r8
 80045da:	3001      	adds	r0, #1
 80045dc:	d0aa      	beq.n	8004534 <_printf_i+0x12c>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	079b      	lsls	r3, r3, #30
 80045e2:	d413      	bmi.n	800460c <_printf_i+0x204>
 80045e4:	68e0      	ldr	r0, [r4, #12]
 80045e6:	9b03      	ldr	r3, [sp, #12]
 80045e8:	4298      	cmp	r0, r3
 80045ea:	bfb8      	it	lt
 80045ec:	4618      	movlt	r0, r3
 80045ee:	e7a3      	b.n	8004538 <_printf_i+0x130>
 80045f0:	2301      	movs	r3, #1
 80045f2:	464a      	mov	r2, r9
 80045f4:	4639      	mov	r1, r7
 80045f6:	4630      	mov	r0, r6
 80045f8:	47c0      	blx	r8
 80045fa:	3001      	adds	r0, #1
 80045fc:	d09a      	beq.n	8004534 <_printf_i+0x12c>
 80045fe:	3501      	adds	r5, #1
 8004600:	68e3      	ldr	r3, [r4, #12]
 8004602:	9a03      	ldr	r2, [sp, #12]
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	42ab      	cmp	r3, r5
 8004608:	dcf2      	bgt.n	80045f0 <_printf_i+0x1e8>
 800460a:	e7eb      	b.n	80045e4 <_printf_i+0x1dc>
 800460c:	2500      	movs	r5, #0
 800460e:	f104 0919 	add.w	r9, r4, #25
 8004612:	e7f5      	b.n	8004600 <_printf_i+0x1f8>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ac      	bne.n	8004572 <_printf_i+0x16a>
 8004618:	7803      	ldrb	r3, [r0, #0]
 800461a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800461e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004622:	e76c      	b.n	80044fe <_printf_i+0xf6>
 8004624:	08005fb1 	.word	0x08005fb1
 8004628:	08005fc2 	.word	0x08005fc2

0800462c <memchr>:
 800462c:	b510      	push	{r4, lr}
 800462e:	b2c9      	uxtb	r1, r1
 8004630:	4402      	add	r2, r0
 8004632:	4290      	cmp	r0, r2
 8004634:	4603      	mov	r3, r0
 8004636:	d101      	bne.n	800463c <memchr+0x10>
 8004638:	2300      	movs	r3, #0
 800463a:	e003      	b.n	8004644 <memchr+0x18>
 800463c:	781c      	ldrb	r4, [r3, #0]
 800463e:	3001      	adds	r0, #1
 8004640:	428c      	cmp	r4, r1
 8004642:	d1f6      	bne.n	8004632 <memchr+0x6>
 8004644:	4618      	mov	r0, r3
 8004646:	bd10      	pop	{r4, pc}

08004648 <memcpy>:
 8004648:	b510      	push	{r4, lr}
 800464a:	1e43      	subs	r3, r0, #1
 800464c:	440a      	add	r2, r1
 800464e:	4291      	cmp	r1, r2
 8004650:	d100      	bne.n	8004654 <memcpy+0xc>
 8004652:	bd10      	pop	{r4, pc}
 8004654:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800465c:	e7f7      	b.n	800464e <memcpy+0x6>

0800465e <memmove>:
 800465e:	4288      	cmp	r0, r1
 8004660:	b510      	push	{r4, lr}
 8004662:	eb01 0302 	add.w	r3, r1, r2
 8004666:	d807      	bhi.n	8004678 <memmove+0x1a>
 8004668:	1e42      	subs	r2, r0, #1
 800466a:	4299      	cmp	r1, r3
 800466c:	d00a      	beq.n	8004684 <memmove+0x26>
 800466e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004672:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004676:	e7f8      	b.n	800466a <memmove+0xc>
 8004678:	4283      	cmp	r3, r0
 800467a:	d9f5      	bls.n	8004668 <memmove+0xa>
 800467c:	1881      	adds	r1, r0, r2
 800467e:	1ad2      	subs	r2, r2, r3
 8004680:	42d3      	cmn	r3, r2
 8004682:	d100      	bne.n	8004686 <memmove+0x28>
 8004684:	bd10      	pop	{r4, pc}
 8004686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800468a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800468e:	e7f7      	b.n	8004680 <memmove+0x22>

08004690 <_realloc_r>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	4607      	mov	r7, r0
 8004694:	4614      	mov	r4, r2
 8004696:	460e      	mov	r6, r1
 8004698:	b921      	cbnz	r1, 80046a4 <_realloc_r+0x14>
 800469a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800469e:	4611      	mov	r1, r2
 80046a0:	f7ff bbf6 	b.w	8003e90 <_malloc_r>
 80046a4:	b922      	cbnz	r2, 80046b0 <_realloc_r+0x20>
 80046a6:	f7ff fba7 	bl	8003df8 <_free_r>
 80046aa:	4625      	mov	r5, r4
 80046ac:	4628      	mov	r0, r5
 80046ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b0:	f000 f814 	bl	80046dc <_malloc_usable_size_r>
 80046b4:	42a0      	cmp	r0, r4
 80046b6:	d20f      	bcs.n	80046d8 <_realloc_r+0x48>
 80046b8:	4621      	mov	r1, r4
 80046ba:	4638      	mov	r0, r7
 80046bc:	f7ff fbe8 	bl	8003e90 <_malloc_r>
 80046c0:	4605      	mov	r5, r0
 80046c2:	2800      	cmp	r0, #0
 80046c4:	d0f2      	beq.n	80046ac <_realloc_r+0x1c>
 80046c6:	4631      	mov	r1, r6
 80046c8:	4622      	mov	r2, r4
 80046ca:	f7ff ffbd 	bl	8004648 <memcpy>
 80046ce:	4631      	mov	r1, r6
 80046d0:	4638      	mov	r0, r7
 80046d2:	f7ff fb91 	bl	8003df8 <_free_r>
 80046d6:	e7e9      	b.n	80046ac <_realloc_r+0x1c>
 80046d8:	4635      	mov	r5, r6
 80046da:	e7e7      	b.n	80046ac <_realloc_r+0x1c>

080046dc <_malloc_usable_size_r>:
 80046dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e0:	1f18      	subs	r0, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bfbc      	itt	lt
 80046e6:	580b      	ldrlt	r3, [r1, r0]
 80046e8:	18c0      	addlt	r0, r0, r3
 80046ea:	4770      	bx	lr

080046ec <sqrtf>:
 80046ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ee:	b08b      	sub	sp, #44	; 0x2c
 80046f0:	4604      	mov	r4, r0
 80046f2:	f000 f845 	bl	8004780 <__ieee754_sqrtf>
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <sqrtf+0x8c>)
 80046f8:	4606      	mov	r6, r0
 80046fa:	f993 5000 	ldrsb.w	r5, [r3]
 80046fe:	1c6b      	adds	r3, r5, #1
 8004700:	d02a      	beq.n	8004758 <sqrtf+0x6c>
 8004702:	4621      	mov	r1, r4
 8004704:	4620      	mov	r0, r4
 8004706:	f7fc fc13 	bl	8000f30 <__aeabi_fcmpun>
 800470a:	4607      	mov	r7, r0
 800470c:	bb20      	cbnz	r0, 8004758 <sqrtf+0x6c>
 800470e:	2100      	movs	r1, #0
 8004710:	4620      	mov	r0, r4
 8004712:	f7fc fbe5 	bl	8000ee0 <__aeabi_fcmplt>
 8004716:	b1f8      	cbz	r0, 8004758 <sqrtf+0x6c>
 8004718:	2301      	movs	r3, #1
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	4b17      	ldr	r3, [pc, #92]	; (800477c <sqrtf+0x90>)
 800471e:	4620      	mov	r0, r4
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	9708      	str	r7, [sp, #32]
 8004724:	f7fb fe76 	bl	8000414 <__aeabi_f2d>
 8004728:	2200      	movs	r2, #0
 800472a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800472e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004732:	2300      	movs	r3, #0
 8004734:	b99d      	cbnz	r5, 800475e <sqrtf+0x72>
 8004736:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800473a:	4668      	mov	r0, sp
 800473c:	f000 f873 	bl	8004826 <matherr>
 8004740:	b1a8      	cbz	r0, 800476e <sqrtf+0x82>
 8004742:	9b08      	ldr	r3, [sp, #32]
 8004744:	b11b      	cbz	r3, 800474e <sqrtf+0x62>
 8004746:	f7ff fb1d 	bl	8003d84 <__errno>
 800474a:	9b08      	ldr	r3, [sp, #32]
 800474c:	6003      	str	r3, [r0, #0]
 800474e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004752:	f7fc f8c9 	bl	80008e8 <__aeabi_d2f>
 8004756:	4606      	mov	r6, r0
 8004758:	4630      	mov	r0, r6
 800475a:	b00b      	add	sp, #44	; 0x2c
 800475c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	f7fb ffd9 	bl	8000718 <__aeabi_ddiv>
 8004766:	2d02      	cmp	r5, #2
 8004768:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800476c:	d1e5      	bne.n	800473a <sqrtf+0x4e>
 800476e:	f7ff fb09 	bl	8003d84 <__errno>
 8004772:	2321      	movs	r3, #33	; 0x21
 8004774:	6003      	str	r3, [r0, #0]
 8004776:	e7e4      	b.n	8004742 <sqrtf+0x56>
 8004778:	20000080 	.word	0x20000080
 800477c:	08005fd3 	.word	0x08005fd3

08004780 <__ieee754_sqrtf>:
 8004780:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8004784:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	4603      	mov	r3, r0
 800478c:	4604      	mov	r4, r0
 800478e:	d309      	bcc.n	80047a4 <__ieee754_sqrtf+0x24>
 8004790:	4601      	mov	r1, r0
 8004792:	f7fc fa07 	bl	8000ba4 <__aeabi_fmul>
 8004796:	4601      	mov	r1, r0
 8004798:	4620      	mov	r0, r4
 800479a:	f7fc f8fb 	bl	8000994 <__addsf3>
 800479e:	4604      	mov	r4, r0
 80047a0:	4620      	mov	r0, r4
 80047a2:	bd70      	pop	{r4, r5, r6, pc}
 80047a4:	2a00      	cmp	r2, #0
 80047a6:	d0fb      	beq.n	80047a0 <__ieee754_sqrtf+0x20>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	da06      	bge.n	80047ba <__ieee754_sqrtf+0x3a>
 80047ac:	4601      	mov	r1, r0
 80047ae:	f7fc f8ef 	bl	8000990 <__aeabi_fsub>
 80047b2:	4601      	mov	r1, r0
 80047b4:	f7fc faaa 	bl	8000d0c <__aeabi_fdiv>
 80047b8:	e7f1      	b.n	800479e <__ieee754_sqrtf+0x1e>
 80047ba:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80047be:	ea4f 54e0 	mov.w	r4, r0, asr #23
 80047c2:	d32e      	bcc.n	8004822 <__ieee754_sqrtf+0xa2>
 80047c4:	3c7f      	subs	r4, #127	; 0x7f
 80047c6:	07e2      	lsls	r2, r4, #31
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	ea4f 0164 	mov.w	r1, r4, asr #1
 80047d0:	4616      	mov	r6, r2
 80047d2:	f04f 0419 	mov.w	r4, #25
 80047d6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80047da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80047de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047e2:	bf48      	it	mi
 80047e4:	005b      	lslmi	r3, r3, #1
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	1835      	adds	r5, r6, r0
 80047ea:	429d      	cmp	r5, r3
 80047ec:	bfde      	ittt	le
 80047ee:	182e      	addle	r6, r5, r0
 80047f0:	1b5b      	suble	r3, r3, r5
 80047f2:	1812      	addle	r2, r2, r0
 80047f4:	3c01      	subs	r4, #1
 80047f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80047fa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80047fe:	d1f3      	bne.n	80047e8 <__ieee754_sqrtf+0x68>
 8004800:	b113      	cbz	r3, 8004808 <__ieee754_sqrtf+0x88>
 8004802:	3201      	adds	r2, #1
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	1054      	asrs	r4, r2, #1
 800480a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800480e:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8004812:	e7c5      	b.n	80047a0 <__ieee754_sqrtf+0x20>
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	3201      	adds	r2, #1
 8004818:	0219      	lsls	r1, r3, #8
 800481a:	d5fb      	bpl.n	8004814 <__ieee754_sqrtf+0x94>
 800481c:	3a01      	subs	r2, #1
 800481e:	1aa4      	subs	r4, r4, r2
 8004820:	e7d0      	b.n	80047c4 <__ieee754_sqrtf+0x44>
 8004822:	2200      	movs	r2, #0
 8004824:	e7f8      	b.n	8004818 <__ieee754_sqrtf+0x98>

08004826 <matherr>:
 8004826:	2000      	movs	r0, #0
 8004828:	4770      	bx	lr
	...

0800482c <_init>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr

08004838 <_fini>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	bf00      	nop
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr
